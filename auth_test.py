#!/usr/bin/env python3
"""
SafeRide Authentication API Tests
Tests the registration and login endpoints urgently requested by user
"""

import requests
import json
import sys

# Configuration - using the URL from the existing test file
BASE_URL = "https://safety-ride.preview.emergentagent.com/api"

# Test data as requested by user
TEST_USER_DATA = {
    "email": "teste@saferide.com",
    "password": "123456",
    "name": "Usuario Teste",
    "vehicle_plate": "TEST123"
}

def log_test(test_name: str, success: bool, details: str = ""):
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    print(f"\n{status} {test_name}")
    if details:
        print(f"   Details: {details}")

def make_request(method: str, endpoint: str, data: dict = None, headers: dict = None):
    """Make HTTP request with error handling"""
    url = f"{BASE_URL}{endpoint}"
    
    default_headers = {"Content-Type": "application/json"}
    if headers:
        default_headers.update(headers)
        
    try:
        print(f"\nüîÑ Making {method} request to {url}")
        if data:
            print(f"   Data: {json.dumps(data, indent=2)}")
            
        if method.upper() == "GET":
            response = requests.get(url, headers=default_headers, params=data, timeout=30)
        elif method.upper() == "POST":
            response = requests.post(url, json=data, headers=default_headers, timeout=30)
        else:
            raise ValueError(f"Unsupported method: {method}")
            
        print(f"   Status Code: {response.status_code}")
        
        if response.text:
            try:
                response_json = response.json()
                print(f"   Response: {json.dumps(response_json, indent=2)}")
            except:
                print(f"   Response Text: {response.text[:500]}...")
        
        return response
        
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå Request failed: {str(e)}")
        return None

def test_backend_connectivity():
    """Test if backend is accessible"""
    print("\n" + "="*60)
    print("üîç TESTING BACKEND CONNECTIVITY")
    print("="*60)
    
    try:
        # Try to access the base URL
        response = requests.get(BASE_URL.replace('/api', ''), timeout=10)
        if response.status_code in [200, 404]:  # 404 is OK, means server is responding
            log_test("Backend Connectivity", True, f"Backend is accessible (Status: {response.status_code})")
            return True
        else:
            log_test("Backend Connectivity", False, f"Unexpected status code: {response.status_code}")
            return False
    except Exception as e:
        log_test("Backend Connectivity", False, f"Cannot connect to backend: {str(e)}")
        return False

def test_user_registration():
    """Test user registration endpoint"""
    print("\n" + "="*60)
    print("üîê TESTING USER REGISTRATION")
    print("="*60)
    
    response = make_request("POST", "/register", TEST_USER_DATA)
    
    if response is None:
        log_test("User Registration", False, "Failed to make request")
        return False, None
    
    if response.status_code == 200:
        try:
            data = response.json()
            
            # Validate response structure
            required_fields = ["access_token", "token_type", "user"]
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                log_test("User Registration", False, f"Missing fields: {missing_fields}")
                return False, None
            
            # Validate user data
            user = data["user"]
            user_fields = ["id", "email", "name", "vehicle_plate"]
            missing_user_fields = [field for field in user_fields if field not in user]
            
            if missing_user_fields:
                log_test("User Registration", False, f"Missing user fields: {missing_user_fields}")
                return False, None
            
            # Check JWT token format
            token = data["access_token"]
            if not token or len(token.split('.')) != 3:
                log_test("User Registration", False, "Invalid JWT token format")
                return False, None
            
            log_test("User Registration", True, f"User registered successfully with ID: {user['id']}")
            return True, token
            
        except Exception as e:
            log_test("User Registration", False, f"Error parsing response: {str(e)}")
            return False, None
            
    elif response.status_code == 400:
        # Check if user already exists
        try:
            error_detail = response.json().get("detail", "")
            if "already registered" in error_detail:
                log_test("User Registration", True, "User already exists (expected behavior)")
                return True, None  # We'll get token from login
            else:
                log_test("User Registration", False, f"Bad request: {error_detail}")
                return False, None
        except:
            log_test("User Registration", False, f"Bad request with status 400")
            return False, None
    else:
        log_test("User Registration", False, f"Unexpected status code: {response.status_code}")
        return False, None

def test_user_login():
    """Test user login endpoint"""
    print("\n" + "="*60)
    print("üîë TESTING USER LOGIN")
    print("="*60)
    
    # Test valid login
    login_data = {
        "email": TEST_USER_DATA["email"],
        "password": TEST_USER_DATA["password"]
    }
    
    response = make_request("POST", "/login", login_data)
    
    if response is None:
        log_test("Valid Login", False, "Failed to make request")
        return False, None
    
    if response.status_code == 200:
        try:
            data = response.json()
            
            # Validate response structure
            required_fields = ["access_token", "token_type", "user"]
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                log_test("Valid Login", False, f"Missing fields: {missing_fields}")
                return False, None
            
            # Check JWT token format
            token = data["access_token"]
            if not token or len(token.split('.')) != 3:
                log_test("Valid Login", False, "Invalid JWT token format")
                return False, None
            
            log_test("Valid Login", True, "Login successful with valid credentials")
            
            # Test invalid login
            print("\nüîí Testing invalid credentials...")
            invalid_login_data = {
                "email": TEST_USER_DATA["email"],
                "password": "wrong_password"
            }
            
            invalid_response = make_request("POST", "/login", invalid_login_data)
            
            if invalid_response and invalid_response.status_code == 401:
                log_test("Invalid Login Rejection", True, "Correctly rejected invalid credentials")
                return True, token
            else:
                status = invalid_response.status_code if invalid_response else "No response"
                log_test("Invalid Login Rejection", False, f"Should have returned 401, got {status}")
                return False, token
                
        except Exception as e:
            log_test("Valid Login", False, f"Error parsing response: {str(e)}")
            return False, None
            
    else:
        log_test("Valid Login", False, f"Login failed with status: {response.status_code}")
        return False, None

def test_cors_and_connectivity():
    """Test CORS and connectivity issues"""
    print("\n" + "="*60)
    print("üåê TESTING CORS AND CONNECTIVITY")
    print("="*60)
    
    try:
        # Test with different headers to check CORS
        headers = {
            "Origin": "https://safety-ride.preview.emergentagent.com",
            "Content-Type": "application/json"
        }
        
        response = requests.options(f"{BASE_URL}/login", headers=headers, timeout=10)
        
        if response.status_code in [200, 204]:
            cors_headers = response.headers
            if 'Access-Control-Allow-Origin' in cors_headers:
                log_test("CORS Configuration", True, f"CORS headers present: {cors_headers.get('Access-Control-Allow-Origin')}")
            else:
                log_test("CORS Configuration", True, "Server responding to OPTIONS request")
        else:
            log_test("CORS Configuration", False, f"OPTIONS request failed: {response.status_code}")
            
    except Exception as e:
        log_test("CORS Configuration", False, f"CORS test failed: {str(e)}")

def main():
    """Main test execution"""
    print("üöÄ URGENT SafeRide Authentication API Tests")
    print(f"üåê Base URL: {BASE_URL}")
    print(f"üë§ Test User: {TEST_USER_DATA['email']}")
    print(f"üîë Password: {TEST_USER_DATA['password']}")
    print(f"üë®‚Äçüíº Name: {TEST_USER_DATA['name']}")
    print(f"üöó Vehicle Plate: {TEST_USER_DATA['vehicle_plate']}")
    
    results = []
    
    # Test sequence
    results.append(("Backend Connectivity", test_backend_connectivity()))
    results.append(("CORS and Connectivity", test_cors_and_connectivity() or True))  # Don't fail on CORS
    
    reg_success, reg_token = test_user_registration()
    results.append(("User Registration", reg_success))
    
    login_success, login_token = test_user_login()
    results.append(("User Login", login_success))
    
    # Final token check
    final_token = login_token or reg_token
    if final_token:
        print(f"\nüé´ JWT Token obtained: {final_token[:50]}...")
        results.append(("JWT Token Generation", True))
    else:
        print("\n‚ùå No JWT token obtained")
        results.append(("JWT Token Generation", False))
    
    # Summary
    print("\n" + "="*60)
    print("üìä TEST SUMMARY")
    print("="*60)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
        else:
            failed += 1
    
    print(f"\nTotal: {len(results)} tests")
    print(f"Passed: {passed}")
    print(f"Failed: {failed}")
    
    if failed == 0:
        print("\nüéâ All authentication tests passed!")
        print("‚úÖ User can create accounts and login successfully")
        print("‚úÖ JWT tokens are being generated correctly")
        print("‚úÖ Backend is running on the correct port")
        print("‚úÖ No CORS or connectivity issues detected")
    else:
        print(f"\n‚ö†Ô∏è  {failed} test(s) failed")
        print("‚ùå There are issues with the authentication system")
    
    return 0 if failed == 0 else 1

if __name__ == "__main__":
    sys.exit(main())