{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"]}},{"name":"./handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":52,"index":129}}],"key":"icHMSVIKxbHLSdF6K64ideInyBg=","exportNames":["*"]}},{"name":"../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":130},"end":{"line":3,"column":35,"index":165}}],"key":"mL7nJyZhzUYx+zMcIt1cBzVuRps=","exportNames":["*"]}},{"name":"../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":166},"end":{"line":4,"column":63,"index":229}}],"key":"bY7FGgfi8WGOEKHKyXsenNEOYXM=","exportNames":["*"]}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":230},"end":{"line":5,"column":55,"index":285}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.filterConfig = filterConfig;\n  exports.findNodeHandle = findNodeHandle;\n  exports.scheduleFlushOperations = scheduleFlushOperations;\n  exports.transformIntoHandlerTags = transformIntoHandlerTags;\n  var _Platform = _interopRequireDefault(require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\"));\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/findNodeHandle\"));\n  var _handlersRegistry = require(_dependencyMap[3], \"./handlersRegistry\");\n  var _utils = require(_dependencyMap[4], \"../utils\");\n  var _RNGestureHandlerModule = _interopRequireDefault(require(_dependencyMap[5], \"../RNGestureHandlerModule\"));\n  var _ghQueueMicrotask = require(_dependencyMap[6], \"../ghQueueMicrotask\");\n  function isConfigParam(param, name) {\n    // param !== Object(param) returns false if `param` is a function\n    // or an object and returns true if `param` is null\n    return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n  }\n  function filterConfig(props, validProps, defaults = {}) {\n    const filteredConfig = Object.assign({}, defaults);\n    for (const key of validProps) {\n      let value = props[key];\n      if (isConfigParam(value, key)) {\n        if (key === 'simultaneousHandlers' || key === 'waitFor') {\n          value = transformIntoHandlerTags(props[key]);\n        } else if (key === 'hitSlop' && typeof value !== 'object') {\n          value = {\n            top: value,\n            left: value,\n            bottom: value,\n            right: value\n          };\n        }\n        filteredConfig[key] = value;\n      }\n    }\n    return filteredConfig;\n  }\n  function transformIntoHandlerTags(handlerIDs) {\n    handlerIDs = (0, _utils.toArray)(handlerIDs);\n    if (_Platform.default.OS === 'web') {\n      return handlerIDs.map(({\n        current\n      }) => current).filter(handle => handle);\n    } // converts handler string IDs into their numeric tags\n\n    return handlerIDs.map(handlerID => {\n      var _handlerID$current;\n      return _handlersRegistry.handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n    }).filter(handlerTag => handlerTag > 0);\n  }\n  function findNodeHandle(node) {\n    if (_Platform.default.OS === 'web') {\n      return node;\n    }\n    return (0, _findNodeHandle.default)(node);\n  }\n  let flushOperationsScheduled = false;\n  function scheduleFlushOperations() {\n    if (!flushOperationsScheduled) {\n      flushOperationsScheduled = true;\n      (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n        _RNGestureHandlerModule.default.flushOperations();\n        flushOperationsScheduled = false;\n      });\n    }\n  }\n});","lineCount":70,"map":[[12,2,2,0],[12,6,2,0,"_handlersRegistry"],[12,23,2,0],[12,26,2,0,"require"],[12,33,2,0],[12,34,2,0,"_dependencyMap"],[12,48,2,0],[13,2,3,0],[13,6,3,0,"_utils"],[13,12,3,0],[13,15,3,0,"require"],[13,22,3,0],[13,23,3,0,"_dependencyMap"],[13,37,3,0],[14,2,4,0],[14,6,4,0,"_RNGestureHandlerModule"],[14,29,4,0],[14,32,4,0,"_interopRequireDefault"],[14,54,4,0],[14,55,4,0,"require"],[14,62,4,0],[14,63,4,0,"_dependencyMap"],[14,77,4,0],[15,2,5,0],[15,6,5,0,"_ghQueueMicrotask"],[15,23,5,0],[15,26,5,0,"require"],[15,33,5,0],[15,34,5,0,"_dependencyMap"],[15,48,5,0],[16,2,7,0],[16,11,7,9,"isConfigParam"],[16,24,7,22,"isConfigParam"],[16,25,7,23,"param"],[16,30,7,28],[16,32,7,30,"name"],[16,36,7,34],[16,38,7,36],[17,4,8,2],[18,4,9,2],[19,4,10,2],[19,11,10,9,"param"],[19,16,10,14],[19,21,10,19,"undefined"],[19,30,10,28],[19,35,10,33,"param"],[19,40,10,38],[19,45,10,43,"Object"],[19,51,10,49],[19,52,10,50,"param"],[19,57,10,55],[19,58,10,56],[19,62,10,60],[19,64,10,62],[19,76,10,74],[19,80,10,78,"param"],[19,85,10,83],[19,86,10,84],[19,87,10,85],[19,91,10,89,"name"],[19,95,10,93],[19,100,10,98],[19,122,10,120],[19,126,10,124,"name"],[19,130,10,128],[19,135,10,133],[19,151,10,149],[20,2,11,0],[21,2,13,7],[21,11,13,16,"filterConfig"],[21,23,13,28,"filterConfig"],[21,24,13,29,"props"],[21,29,13,34],[21,31,13,36,"validProps"],[21,41,13,46],[21,43,13,48,"defaults"],[21,51,13,56],[21,54,13,59],[21,55,13,60],[21,56,13,61],[21,58,13,63],[22,4,14,2],[22,10,14,8,"filteredConfig"],[22,24,14,22],[22,27,14,22,"Object"],[22,33,14,22],[22,34,14,22,"assign"],[22,40,14,22],[22,45,14,30,"defaults"],[22,53,14,38],[22,54,15,3],[23,4,17,2],[23,9,17,7],[23,15,17,13,"key"],[23,18,17,16],[23,22,17,20,"validProps"],[23,32,17,30],[23,34,17,32],[24,6,18,4],[24,10,18,8,"value"],[24,15,18,13],[24,18,18,16,"props"],[24,23,18,21],[24,24,18,22,"key"],[24,27,18,25],[24,28,18,26],[25,6,20,4],[25,10,20,8,"isConfigParam"],[25,23,20,21],[25,24,20,22,"value"],[25,29,20,27],[25,31,20,29,"key"],[25,34,20,32],[25,35,20,33],[25,37,20,35],[26,8,21,6],[26,12,21,10,"key"],[26,15,21,13],[26,20,21,18],[26,42,21,40],[26,46,21,44,"key"],[26,49,21,47],[26,54,21,52],[26,63,21,61],[26,65,21,63],[27,10,22,8,"value"],[27,15,22,13],[27,18,22,16,"transformIntoHandlerTags"],[27,42,22,40],[27,43,22,41,"props"],[27,48,22,46],[27,49,22,47,"key"],[27,52,22,50],[27,53,22,51],[27,54,22,52],[28,8,23,6],[28,9,23,7],[28,15,23,13],[28,19,23,17,"key"],[28,22,23,20],[28,27,23,25],[28,36,23,34],[28,40,23,38],[28,47,23,45,"value"],[28,52,23,50],[28,57,23,55],[28,65,23,63],[28,67,23,65],[29,10,24,8,"value"],[29,15,24,13],[29,18,24,16],[30,12,25,10,"top"],[30,15,25,13],[30,17,25,15,"value"],[30,22,25,20],[31,12,26,10,"left"],[31,16,26,14],[31,18,26,16,"value"],[31,23,26,21],[32,12,27,10,"bottom"],[32,18,27,16],[32,20,27,18,"value"],[32,25,27,23],[33,12,28,10,"right"],[33,17,28,15],[33,19,28,17,"value"],[34,10,29,8],[34,11,29,9],[35,8,30,6],[36,8,32,6,"filteredConfig"],[36,22,32,20],[36,23,32,21,"key"],[36,26,32,24],[36,27,32,25],[36,30,32,28,"value"],[36,35,32,33],[37,6,33,4],[38,4,34,2],[39,4,36,2],[39,11,36,9,"filteredConfig"],[39,25,36,23],[40,2,37,0],[41,2,38,7],[41,11,38,16,"transformIntoHandlerTags"],[41,35,38,40,"transformIntoHandlerTags"],[41,36,38,41,"handlerIDs"],[41,46,38,51],[41,48,38,53],[42,4,39,2,"handlerIDs"],[42,14,39,12],[42,17,39,15],[42,21,39,15,"toArray"],[42,35,39,22],[42,37,39,23,"handlerIDs"],[42,47,39,33],[42,48,39,34],[43,4,41,2],[43,8,41,6,"Platform"],[43,25,41,14],[43,26,41,15,"OS"],[43,28,41,17],[43,33,41,22],[43,38,41,27],[43,40,41,29],[44,6,42,4],[44,13,42,11,"handlerIDs"],[44,23,42,21],[44,24,42,22,"map"],[44,27,42,25],[44,28,42,26],[44,29,42,27],[45,8,43,6,"current"],[46,6,44,4],[46,7,44,5],[46,12,44,10,"current"],[46,19,44,17],[46,20,44,18],[46,21,44,19,"filter"],[46,27,44,25],[46,28,44,26,"handle"],[46,34,44,32],[46,38,44,36,"handle"],[46,44,44,42],[46,45,44,43],[47,4,45,2],[47,5,45,3],[47,6,45,4],[49,4,48,2],[49,11,48,9,"handlerIDs"],[49,21,48,19],[49,22,48,20,"map"],[49,25,48,23],[49,26,48,24,"handlerID"],[49,35,48,33],[49,39,48,37],[50,6,49,4],[50,10,49,8,"_handlerID$current"],[50,28,49,26],[51,6,51,4],[51,13,51,11,"handlerIDToTag"],[51,45,51,25],[51,46,51,26,"handlerID"],[51,55,51,35],[51,56,51,36],[51,61,51,41],[51,62,51,42,"_handlerID$current"],[51,80,51,60],[51,83,51,63,"handlerID"],[51,92,51,72],[51,93,51,73,"current"],[51,100,51,80],[51,106,51,86],[51,110,51,90],[51,114,51,94,"_handlerID$current"],[51,132,51,112],[51,137,51,117],[51,142,51,122],[51,143,51,123],[51,146,51,126],[51,151,51,131],[51,152,51,132],[51,155,51,135,"_handlerID$current"],[51,173,51,153],[51,174,51,154,"handlerTag"],[51,184,51,164],[51,185,51,165],[51,189,51,169],[51,190,51,170],[51,191,51,171],[52,4,52,2],[52,5,52,3],[52,6,52,4],[52,7,52,5,"filter"],[52,13,52,11],[52,14,52,12,"handlerTag"],[52,24,52,22],[52,28,52,26,"handlerTag"],[52,38,52,36],[52,41,52,39],[52,42,52,40],[52,43,52,41],[53,2,53,0],[54,2,54,7],[54,11,54,16,"findNodeHandle"],[54,25,54,30,"findNodeHandle"],[54,26,54,31,"node"],[54,30,54,35],[54,32,54,37],[55,4,55,2],[55,8,55,6,"Platform"],[55,25,55,14],[55,26,55,15,"OS"],[55,28,55,17],[55,33,55,22],[55,38,55,27],[55,40,55,29],[56,6,56,4],[56,13,56,11,"node"],[56,17,56,15],[57,4,57,2],[58,4,59,2],[58,11,59,9],[58,15,59,9,"findNodeHandleRN"],[58,38,59,25],[58,40,59,26,"node"],[58,44,59,30],[58,45,59,31],[59,2,60,0],[60,2,61,0],[60,6,61,4,"flushOperationsScheduled"],[60,30,61,28],[60,33,61,31],[60,38,61,36],[61,2,62,7],[61,11,62,16,"scheduleFlushOperations"],[61,34,62,39,"scheduleFlushOperations"],[61,35,62,39],[61,37,62,42],[62,4,63,2],[62,8,63,6],[62,9,63,7,"flushOperationsScheduled"],[62,33,63,31],[62,35,63,33],[63,6,64,4,"flushOperationsScheduled"],[63,30,64,28],[63,33,64,31],[63,37,64,35],[64,6,65,4],[64,10,65,4,"ghQueueMicrotask"],[64,44,65,20],[64,46,65,21],[64,52,65,27],[65,8,66,6,"RNGestureHandlerModule"],[65,39,66,28],[65,40,66,29,"flushOperations"],[65,55,66,44],[65,56,66,45],[65,57,66,46],[66,8,67,6,"flushOperationsScheduled"],[66,32,67,30],[66,35,67,33],[66,40,67,38],[67,6,68,4],[67,7,68,5],[67,8,68,6],[68,4,69,2],[69,2,70,0],[70,0,70,1],[70,3]],"functionMap":{"names":["<global>","isConfigParam","filterConfig","transformIntoHandlerTags","handlerIDs.map$argument_0","handlerIDs.map.filter$argument_0","findNodeHandle","scheduleFlushOperations","ghQueueMicrotask$argument_0"],"mappings":"AAA;ACM;CDI;OEE;CFwB;OGC;0BCI;iBDE,SE,gBF;wBCI;GDI,SE,4BF;CHC;OMC;CNM;OOE;qBCG;KDG;CPE"}},"type":"js/module"}]}