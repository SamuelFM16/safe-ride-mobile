{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"]}},{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":211},"end":{"line":3,"column":36,"index":247}}],"key":"I5Lt2ouU6D9a2C2V4SJv4GWe8Fg=","exportNames":["*"]}},{"name":"./DiscreteGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":248},"end":{"line":4,"column":62,"index":310}}],"key":"dpOMqAtzFjjUQychI3TYNsYmXQE=","exportNames":["*"]}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":311},"end":{"line":5,"column":32,"index":343}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n  var _hammerjs = _interopRequireDefault(require(_dependencyMap[2], \"@egjs/hammerjs\"));\n  var _DiscreteGestureHandler = _interopRequireDefault(require(_dependencyMap[3], \"./DiscreteGestureHandler\"));\n  var _utils = require(_dependencyMap[4], \"./utils\");\n  const _excluded = [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  class TapGestureHandler extends _DiscreteGestureHandler.default {\n    constructor(...args) {\n      super(...args);\n      _defineProperty(this, \"_shouldFireEndEvent\", null);\n      _defineProperty(this, \"_timer\", void 0);\n      _defineProperty(this, \"_multiTapTimer\", void 0);\n      _defineProperty(this, \"onSuccessfulTap\", ev => {\n        if (this._getPendingGestures().length) {\n          this._shouldFireEndEvent = ev;\n          return;\n        }\n        if (ev.eventType === _hammerjs.default.INPUT_END) {\n          this.sendEvent(Object.assign({}, ev, {\n            eventType: _hammerjs.default.INPUT_MOVE\n          }));\n        } // When handler gets activated it will turn into State.END immediately.\n\n        this.sendEvent(Object.assign({}, ev, {\n          isFinal: true\n        }));\n        this.onGestureEnded(ev);\n      });\n    }\n\n    // TODO unused?\n    get name() {\n      return 'tap';\n    }\n    get NativeGestureClass() {\n      return _hammerjs.default.Tap;\n    }\n    get maxDelayMs() {\n      // @ts-ignore TODO(TS) trace down config\n      return (0, _utils.isnan)(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n    simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n    onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n    onRawEvent(ev) {\n      super.onRawEvent(ev); // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n\n      if (!this.hasGestureFailed && !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal) {\n        // Tap Gesture start event\n        const gesture = this.hammer.get(this.name); // @ts-ignore TODO(TS) trace down config\n\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(() => {\n          // Handle case where one finger presses slightly\n          // after the first finger on a multi-tap event\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n      if (this.hasGestureFailed) {\n        return;\n      } // Hammer doesn't send a `cancel` event for taps.\n      // Manually fail the event.\n\n      if (ev.isFinal) {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (ev.maxPointers > 1) {\n          setTimeout(() => {\n            if (this.isGestureRunning) {\n              this.cancelEvent(ev);\n            }\n          });\n        } // Clear last timer\n\n        clearTimeout(this._timer); // Create time out for multi-taps.\n\n        this._timer = setTimeout(() => {\n          this.hasGestureFailed = true;\n          this.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        // Tap Gesture start event\n        const gesture = this.hammer.get(this.name); // @ts-ignore TODO(TS) trace down config\n\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n    getHammerConfig() {\n      return Object.assign({}, super.getHammerConfig(), {\n        event: this.name,\n        // @ts-ignore TODO(TS) trace down config\n        taps: (0, _utils.isnan)(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time:\n        // @ts-ignore TODO(TS) trace down config\n        (0, _utils.isnan)(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 :\n        // @ts-ignore TODO(TS) trace down config\n        this.config.maxDurationMs\n      });\n    }\n    updateGestureConfig(_ref) {\n      let {\n          shouldCancelWhenOutside = true,\n          maxDeltaX = Number.NaN,\n          maxDeltaY = Number.NaN,\n          numberOfTaps = 1,\n          minDurationMs = 525,\n          maxDelayMs = Number.NaN,\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n          maxDurationMs = Number.NaN,\n          maxDist = 2,\n          minPointers = 1,\n          maxPointers = 1\n        } = _ref,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);\n      return super.updateGestureConfig(Object.assign({\n        shouldCancelWhenOutside,\n        numberOfTaps,\n        maxDeltaX,\n        maxDeltaY,\n        minDurationMs,\n        maxDelayMs,\n        maxDist,\n        minPointers,\n        maxPointers\n      }, props));\n    }\n    onGestureEnded(...props) {\n      clearTimeout(this._timer); // @ts-ignore TODO(TS) check how onGestureEnded works\n\n      super.onGestureEnded(...props);\n    }\n    onWaitingEnded(_gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }\n  var _default = exports.default = TapGestureHandler;\n});","lineCount":180,"map":[[8,2,3,0],[8,6,3,0,"_hammerjs"],[8,15,3,0],[8,18,3,0,"_interopRequireDefault"],[8,40,3,0],[8,41,3,0,"require"],[8,48,3,0],[8,49,3,0,"_dependencyMap"],[8,63,3,0],[9,2,4,0],[9,6,4,0,"_DiscreteGestureHandler"],[9,29,4,0],[9,32,4,0,"_interopRequireDefault"],[9,54,4,0],[9,55,4,0,"require"],[9,62,4,0],[9,63,4,0,"_dependencyMap"],[9,77,4,0],[10,2,5,0],[10,6,5,0,"_utils"],[10,12,5,0],[10,15,5,0,"require"],[10,22,5,0],[10,23,5,0,"_dependencyMap"],[10,37,5,0],[11,2,5,32],[11,8,5,32,"_excluded"],[11,17,5,32],[12,2,1,0],[12,11,1,9,"_defineProperty"],[12,26,1,24,"_defineProperty"],[12,27,1,25,"obj"],[12,30,1,28],[12,32,1,30,"key"],[12,35,1,33],[12,37,1,35,"value"],[12,42,1,40],[12,44,1,42],[13,4,1,44],[13,8,1,48,"key"],[13,11,1,51],[13,15,1,55,"obj"],[13,18,1,58],[13,20,1,60],[14,6,1,62,"Object"],[14,12,1,68],[14,13,1,69,"defineProperty"],[14,27,1,83],[14,28,1,84,"obj"],[14,31,1,87],[14,33,1,89,"key"],[14,36,1,92],[14,38,1,94],[15,8,1,96,"value"],[15,13,1,101],[15,15,1,103,"value"],[15,20,1,108],[16,8,1,110,"enumerable"],[16,18,1,120],[16,20,1,122],[16,24,1,126],[17,8,1,128,"configurable"],[17,20,1,140],[17,22,1,142],[17,26,1,146],[18,8,1,148,"writable"],[18,16,1,156],[18,18,1,158],[19,6,1,163],[19,7,1,164],[19,8,1,165],[20,4,1,167],[20,5,1,168],[20,11,1,174],[21,6,1,176,"obj"],[21,9,1,179],[21,10,1,180,"key"],[21,13,1,183],[21,14,1,184],[21,17,1,187,"value"],[21,22,1,192],[22,4,1,194],[23,4,1,196],[23,11,1,203,"obj"],[23,14,1,206],[24,2,1,208],[25,2,7,0],[25,8,7,6,"TapGestureHandler"],[25,25,7,23],[25,34,7,32,"DiscreteGestureHandler"],[25,65,7,54],[25,66,7,55],[26,4,8,2,"constructor"],[26,15,8,13,"constructor"],[26,16,8,14],[26,19,8,17,"args"],[26,23,8,21],[26,25,8,23],[27,6,9,4],[27,11,9,9],[27,12,9,10],[27,15,9,13,"args"],[27,19,9,17],[27,20,9,18],[28,6,11,4,"_defineProperty"],[28,21,11,19],[28,22,11,20],[28,26,11,24],[28,28,11,26],[28,49,11,47],[28,51,11,49],[28,55,11,53],[28,56,11,54],[29,6,13,4,"_defineProperty"],[29,21,13,19],[29,22,13,20],[29,26,13,24],[29,28,13,26],[29,36,13,34],[29,38,13,36],[29,43,13,41],[29,44,13,42],[29,45,13,43],[30,6,15,4,"_defineProperty"],[30,21,15,19],[30,22,15,20],[30,26,15,24],[30,28,15,26],[30,44,15,42],[30,46,15,44],[30,51,15,49],[30,52,15,50],[30,53,15,51],[31,6,17,4,"_defineProperty"],[31,21,17,19],[31,22,17,20],[31,26,17,24],[31,28,17,26],[31,45,17,43],[31,47,17,45,"ev"],[31,49,17,47],[31,53,17,51],[32,8,18,6],[32,12,18,10],[32,16,18,14],[32,17,18,15,"_getPendingGestures"],[32,36,18,34],[32,37,18,35],[32,38,18,36],[32,39,18,37,"length"],[32,45,18,43],[32,47,18,45],[33,10,19,8],[33,14,19,12],[33,15,19,13,"_shouldFireEndEvent"],[33,34,19,32],[33,37,19,35,"ev"],[33,39,19,37],[34,10,20,8],[35,8,21,6],[36,8,23,6],[36,12,23,10,"ev"],[36,14,23,12],[36,15,23,13,"eventType"],[36,24,23,22],[36,29,23,27,"Hammer"],[36,46,23,33],[36,47,23,34,"INPUT_END"],[36,56,23,43],[36,58,23,45],[37,10,24,8],[37,14,24,12],[37,15,24,13,"sendEvent"],[37,24,24,22],[37,25,24,22,"Object"],[37,31,24,22],[37,32,24,22,"assign"],[37,38,24,22],[37,43,24,28,"ev"],[37,45,24,30],[38,12,25,10,"eventType"],[38,21,25,19],[38,23,25,21,"Hammer"],[38,40,25,27],[38,41,25,28,"INPUT_MOVE"],[39,10,25,38],[39,12,26,9],[39,13,26,10],[40,8,27,6],[40,9,27,7],[40,10,27,8],[42,8,30,6],[42,12,30,10],[42,13,30,11,"sendEvent"],[42,22,30,20],[42,23,30,20,"Object"],[42,29,30,20],[42,30,30,20,"assign"],[42,36,30,20],[42,41,30,26,"ev"],[42,43,30,28],[43,10,31,8,"isFinal"],[43,17,31,15],[43,19,31,17],[44,8,31,21],[44,10,32,7],[44,11,32,8],[45,8,33,6],[45,12,33,10],[45,13,33,11,"onGestureEnded"],[45,27,33,25],[45,28,33,26,"ev"],[45,30,33,28],[45,31,33,29],[46,6,34,4],[46,7,34,5],[46,8,34,6],[47,4,35,2],[49,4,37,2],[50,4,38,2],[50,8,38,6,"name"],[50,12,38,10,"name"],[50,13,38,10],[50,15,38,13],[51,6,39,4],[51,13,39,11],[51,18,39,16],[52,4,40,2],[53,4,42,2],[53,8,42,6,"NativeGestureClass"],[53,26,42,24,"NativeGestureClass"],[53,27,42,24],[53,29,42,27],[54,6,43,4],[54,13,43,11,"Hammer"],[54,30,43,17],[54,31,43,18,"Tap"],[54,34,43,21],[55,4,44,2],[56,4,46,2],[56,8,46,6,"maxDelayMs"],[56,18,46,16,"maxDelayMs"],[56,19,46,16],[56,21,46,19],[57,6,47,4],[58,6,48,4],[58,13,48,11],[58,17,48,11,"isnan"],[58,29,48,16],[58,31,48,17],[58,35,48,21],[58,36,48,22,"config"],[58,42,48,28],[58,43,48,29,"maxDelayMs"],[58,53,48,39],[58,54,48,40],[58,57,48,43],[58,60,48,46],[58,63,48,49],[58,67,48,53],[58,68,48,54,"config"],[58,74,48,60],[58,75,48,61,"maxDelayMs"],[58,85,48,71],[59,4,49,2],[60,4,51,2,"simulateCancelEvent"],[60,23,51,21,"simulateCancelEvent"],[60,24,51,22,"inputData"],[60,33,51,31],[60,35,51,33],[61,6,52,4],[61,10,52,8],[61,14,52,12],[61,15,52,13,"isGestureRunning"],[61,31,52,29],[61,33,52,31],[62,8,53,6],[62,12,53,10],[62,13,53,11,"cancelEvent"],[62,24,53,22],[62,25,53,23,"inputData"],[62,34,53,32],[62,35,53,33],[63,6,54,4],[64,4,55,2],[65,4,57,2,"onGestureActivated"],[65,22,57,20,"onGestureActivated"],[65,23,57,21,"ev"],[65,25,57,23],[65,27,57,25],[66,6,58,4],[66,10,58,8],[66,14,58,12],[66,15,58,13,"isGestureRunning"],[66,31,58,29],[66,33,58,31],[67,8,59,6],[67,12,59,10],[67,13,59,11,"onSuccessfulTap"],[67,28,59,26],[67,29,59,27,"ev"],[67,31,59,29],[67,32,59,30],[68,6,60,4],[69,4,61,2],[70,4,63,2,"onRawEvent"],[70,14,63,12,"onRawEvent"],[70,15,63,13,"ev"],[70,17,63,15],[70,19,63,17],[71,6,64,4],[71,11,64,9],[71,12,64,10,"onRawEvent"],[71,22,64,20],[71,23,64,21,"ev"],[71,25,64,23],[71,26,64,24],[71,27,64,25],[71,28,64,26],[73,6,66,4],[73,10,66,8],[73,11,66,9],[73,15,66,13],[73,16,66,14,"hasGestureFailed"],[73,32,66,30],[73,36,66,34],[73,37,66,35],[73,41,66,39],[73,42,66,40,"isGestureRunning"],[73,58,66,56],[74,6,66,60],[75,6,67,4],[75,7,67,5,"ev"],[75,9,67,7],[75,10,67,8,"isFinal"],[75,17,67,15],[75,19,67,17],[76,8,68,6],[77,8,69,6],[77,14,69,12,"gesture"],[77,21,69,19],[77,24,69,22],[77,28,69,26],[77,29,69,27,"hammer"],[77,35,69,33],[77,36,69,34,"get"],[77,39,69,37],[77,40,69,38],[77,44,69,42],[77,45,69,43,"name"],[77,49,69,47],[77,50,69,48],[77,51,69,49],[77,52,69,50],[79,8,71,6],[79,12,71,10,"gesture"],[79,19,71,17],[79,20,71,18,"options"],[79,27,71,25],[79,28,71,26,"enable"],[79,34,71,32],[79,35,71,33,"gesture"],[79,42,71,40],[79,44,71,42,"ev"],[79,46,71,44],[79,47,71,45],[79,49,71,47],[80,10,72,8,"clearTimeout"],[80,22,72,20],[80,23,72,21],[80,27,72,25],[80,28,72,26,"_multiTapTimer"],[80,42,72,40],[80,43,72,41],[81,10,73,8],[81,14,73,12],[81,15,73,13,"onStart"],[81,22,73,20],[81,23,73,21,"ev"],[81,25,73,23],[81,26,73,24],[82,10,74,8],[82,14,74,12],[82,15,74,13,"sendEvent"],[82,24,74,22],[82,25,74,23,"ev"],[82,27,74,25],[82,28,74,26],[83,8,75,6],[84,6,76,4],[85,6,78,4],[85,10,78,8,"ev"],[85,12,78,10],[85,13,78,11,"isFinal"],[85,20,78,18],[85,24,78,22,"ev"],[85,26,78,24],[85,27,78,25,"maxPointers"],[85,38,78,36],[85,41,78,39],[85,42,78,40],[85,44,78,42],[86,8,79,6,"setTimeout"],[86,18,79,16],[86,19,79,17],[86,25,79,23],[87,10,80,8],[88,10,81,8],[89,10,82,8],[89,14,82,12],[89,18,82,16],[89,19,82,17,"isGestureRunning"],[89,35,82,33],[89,37,82,35],[90,12,83,10],[90,16,83,14],[90,17,83,15,"cancelEvent"],[90,28,83,26],[90,29,83,27,"ev"],[90,31,83,29],[90,32,83,30],[91,10,84,8],[92,8,85,6],[92,9,85,7],[92,10,85,8],[93,6,86,4],[94,6,88,4],[94,10,88,8],[94,14,88,12],[94,15,88,13,"hasGestureFailed"],[94,31,88,29],[94,33,88,31],[95,8,89,6],[96,6,90,4],[96,7,90,5],[96,8,90,6],[97,6,91,4],[99,6,94,4],[99,10,94,8,"ev"],[99,12,94,10],[99,13,94,11,"isFinal"],[99,20,94,18],[99,22,94,20],[100,8,95,6],[101,8,96,6],[102,8,97,6],[102,12,97,10,"ev"],[102,14,97,12],[102,15,97,13,"maxPointers"],[102,26,97,24],[102,29,97,27],[102,30,97,28],[102,32,97,30],[103,10,98,8,"setTimeout"],[103,20,98,18],[103,21,98,19],[103,27,98,25],[104,12,99,10],[104,16,99,14],[104,20,99,18],[104,21,99,19,"isGestureRunning"],[104,37,99,35],[104,39,99,37],[105,14,100,12],[105,18,100,16],[105,19,100,17,"cancelEvent"],[105,30,100,28],[105,31,100,29,"ev"],[105,33,100,31],[105,34,100,32],[106,12,101,10],[107,10,102,8],[107,11,102,9],[107,12,102,10],[108,8,103,6],[108,9,103,7],[108,10,103,8],[110,8,106,6,"clearTimeout"],[110,20,106,18],[110,21,106,19],[110,25,106,23],[110,26,106,24,"_timer"],[110,32,106,30],[110,33,106,31],[110,34,106,32],[110,35,106,33],[112,8,108,6],[112,12,108,10],[112,13,108,11,"_timer"],[112,19,108,17],[112,22,108,20,"setTimeout"],[112,32,108,30],[112,33,108,31],[112,39,108,37],[113,10,109,8],[113,14,109,12],[113,15,109,13,"hasGestureFailed"],[113,31,109,29],[113,34,109,32],[113,38,109,36],[114,10,110,8],[114,14,110,12],[114,15,110,13,"cancelEvent"],[114,26,110,24],[114,27,110,25,"ev"],[114,29,110,27],[114,30,110,28],[115,8,111,6],[115,9,111,7],[115,11,111,9],[115,15,111,13],[115,16,111,14,"maxDelayMs"],[115,26,111,24],[115,27,111,25],[116,6,112,4],[116,7,112,5],[116,13,112,11],[116,17,112,15],[116,18,112,16],[116,22,112,20],[116,23,112,21,"hasGestureFailed"],[116,39,112,37],[116,43,112,41],[116,44,112,42],[116,48,112,46],[116,49,112,47,"isGestureRunning"],[116,65,112,63],[116,67,112,65],[117,8,113,6],[118,8,114,6],[118,14,114,12,"gesture"],[118,21,114,19],[118,24,114,22],[118,28,114,26],[118,29,114,27,"hammer"],[118,35,114,33],[118,36,114,34,"get"],[118,39,114,37],[118,40,114,38],[118,44,114,42],[118,45,114,43,"name"],[118,49,114,47],[118,50,114,48],[118,51,114,49],[118,52,114,50],[120,8,116,6],[120,12,116,10,"gesture"],[120,19,116,17],[120,20,116,18,"options"],[120,27,116,25],[120,28,116,26,"enable"],[120,34,116,32],[120,35,116,33,"gesture"],[120,42,116,40],[120,44,116,42,"ev"],[120,46,116,44],[120,47,116,45],[120,49,116,47],[121,10,117,8,"clearTimeout"],[121,22,117,20],[121,23,117,21],[121,27,117,25],[121,28,117,26,"_multiTapTimer"],[121,42,117,40],[121,43,117,41],[122,10,118,8],[122,14,118,12],[122,15,118,13,"onStart"],[122,22,118,20],[122,23,118,21,"ev"],[122,25,118,23],[122,26,118,24],[123,10,119,8],[123,14,119,12],[123,15,119,13,"sendEvent"],[123,24,119,22],[123,25,119,23,"ev"],[123,27,119,25],[123,28,119,26],[124,8,120,6],[125,6,121,4],[126,4,122,2],[127,4,124,2,"getHammerConfig"],[127,19,124,17,"getHammerConfig"],[127,20,124,17],[127,22,124,20],[128,6,125,4],[128,13,125,4,"Object"],[128,19,125,4],[128,20,125,4,"assign"],[128,26,125,4],[128,31,125,16],[128,36,125,21],[128,37,125,22,"getHammerConfig"],[128,52,125,37],[128,53,125,38],[128,54,125,39],[129,8,126,6,"event"],[129,13,126,11],[129,15,126,13],[129,19,126,17],[129,20,126,18,"name"],[129,24,126,22],[130,8,127,6],[131,8,128,6,"taps"],[131,12,128,10],[131,14,128,12],[131,18,128,12,"isnan"],[131,30,128,17],[131,32,128,18],[131,36,128,22],[131,37,128,23,"config"],[131,43,128,29],[131,44,128,30,"numberOfTaps"],[131,56,128,42],[131,57,128,43],[131,60,128,46],[131,61,128,47],[131,64,128,50],[131,68,128,54],[131,69,128,55,"config"],[131,75,128,61],[131,76,128,62,"numberOfTaps"],[131,88,128,74],[132,8,129,6,"interval"],[132,16,129,14],[132,18,129,16],[132,22,129,20],[132,23,129,21,"maxDelayMs"],[132,33,129,31],[133,8,130,6,"time"],[133,12,130,10],[134,8,130,12],[135,8,131,6],[135,12,131,6,"isnan"],[135,24,131,11],[135,26,131,12],[135,30,131,16],[135,31,131,17,"config"],[135,37,131,23],[135,38,131,24,"maxDurationMs"],[135,51,131,37],[135,52,131,38],[135,56,131,42],[135,60,131,46],[135,61,131,47,"config"],[135,67,131,53],[135,68,131,54,"maxDurationMs"],[135,81,131,67],[135,85,131,71],[135,89,131,75],[135,92,131,78],[135,95,131,81],[136,8,131,84],[137,8,132,6],[137,12,132,10],[137,13,132,11,"config"],[137,19,132,17],[137,20,132,18,"maxDurationMs"],[138,6,132,31],[139,4,134,2],[140,4,136,2,"updateGestureConfig"],[140,23,136,21,"updateGestureConfig"],[140,24,136,21,"_ref"],[140,28,136,21],[140,30,149,5],[141,6,149,5],[141,10,136,22],[142,10,137,4,"shouldCancelWhenOutside"],[142,33,137,27],[142,36,137,30],[142,40,137,34],[143,10,138,4,"maxDeltaX"],[143,19,138,13],[143,22,138,16,"Number"],[143,28,138,22],[143,29,138,23,"NaN"],[143,32,138,26],[144,10,139,4,"maxDeltaY"],[144,19,139,13],[144,22,139,16,"Number"],[144,28,139,22],[144,29,139,23,"NaN"],[144,32,139,26],[145,10,140,4,"numberOfTaps"],[145,22,140,16],[145,25,140,19],[145,26,140,20],[146,10,141,4,"minDurationMs"],[146,23,141,17],[146,26,141,20],[146,29,141,23],[147,10,142,4,"maxDelayMs"],[147,20,142,14],[147,23,142,17,"Number"],[147,29,142,23],[147,30,142,24,"NaN"],[147,33,142,27],[148,10,143,4],[149,10,144,4,"maxDurationMs"],[149,23,144,17],[149,26,144,20,"Number"],[149,32,144,26],[149,33,144,27,"NaN"],[149,36,144,30],[150,10,145,4,"maxDist"],[150,17,145,11],[150,20,145,14],[150,21,145,15],[151,10,146,4,"minPointers"],[151,21,146,15],[151,24,146,18],[151,25,146,19],[152,10,147,4,"maxPointers"],[152,21,147,15],[152,24,147,18],[153,8,149,2],[153,9,149,3],[153,12,149,3,"_ref"],[153,16,149,3],[154,8,148,7,"props"],[154,13,148,12],[154,20,148,12,"_objectWithoutPropertiesLoose2"],[154,50,148,12],[154,51,148,12,"default"],[154,58,148,12],[154,60,148,12,"_ref"],[154,64,148,12],[154,66,148,12,"_excluded"],[154,75,148,12],[155,6,150,4],[155,13,150,11],[155,18,150,16],[155,19,150,17,"updateGestureConfig"],[155,38,150,36],[155,39,150,36,"Object"],[155,45,150,36],[155,46,150,36,"assign"],[155,52,150,36],[156,8,151,6,"shouldCancelWhenOutside"],[156,31,151,29],[157,8,152,6,"numberOfTaps"],[157,20,152,18],[158,8,153,6,"maxDeltaX"],[158,17,153,15],[159,8,154,6,"maxDeltaY"],[159,17,154,15],[160,8,155,6,"minDurationMs"],[160,21,155,19],[161,8,156,6,"maxDelayMs"],[161,18,156,16],[162,8,157,6,"maxDist"],[162,15,157,13],[163,8,158,6,"minPointers"],[163,19,158,17],[164,8,159,6,"maxPointers"],[165,6,159,17],[165,9,160,9,"props"],[165,14,160,14],[165,15,161,5],[165,16,161,6],[166,4,162,2],[167,4,164,2,"onGestureEnded"],[167,18,164,16,"onGestureEnded"],[167,19,164,17],[167,22,164,20,"props"],[167,27,164,25],[167,29,164,27],[168,6,165,4,"clearTimeout"],[168,18,165,16],[168,19,165,17],[168,23,165,21],[168,24,165,22,"_timer"],[168,30,165,28],[168,31,165,29],[168,32,165,30],[168,33,165,31],[170,6,167,4],[170,11,167,9],[170,12,167,10,"onGestureEnded"],[170,26,167,24],[170,27,167,25],[170,30,167,28,"props"],[170,35,167,33],[170,36,167,34],[171,4,168,2],[172,4,170,2,"onWaitingEnded"],[172,18,170,16,"onWaitingEnded"],[172,19,170,17,"_gesture"],[172,27,170,25],[172,29,170,27],[173,6,171,4],[173,10,171,8],[173,14,171,12],[173,15,171,13,"_shouldFireEndEvent"],[173,34,171,32],[173,36,171,34],[174,8,172,6],[174,12,172,10],[174,13,172,11,"onSuccessfulTap"],[174,28,172,26],[174,29,172,27],[174,33,172,31],[174,34,172,32,"_shouldFireEndEvent"],[174,53,172,51],[174,54,172,52],[175,8,173,6],[175,12,173,10],[175,13,173,11,"_shouldFireEndEvent"],[175,32,173,30],[175,35,173,33],[175,39,173,37],[176,6,174,4],[177,4,175,2],[178,2,177,0],[179,2,177,1],[179,6,177,1,"_default"],[179,14,177,1],[179,17,177,1,"exports"],[179,24,177,1],[179,25,177,1,"default"],[179,32,177,1],[179,35,179,15,"TapGestureHandler"],[179,52,179,32],[180,0,179,32],[180,3]],"functionMap":{"names":["_defineProperty","<global>","TapGestureHandler","constructor","_defineProperty$argument_2","get__name","get__NativeGestureClass","get__maxDelayMs","simulateCancelEvent","onGestureActivated","onRawEvent","setTimeout$argument_0","getHammerConfig","updateGestureConfig","onGestureEnded","onWaitingEnded"],"mappings":"AAA,iNC;ACM;ECC;6CCS;KDiB;GDC;EGG;GHE;EIE;GJE;EKE;GLG;EME;GNI;EOE;GPI;EQE;iBCgB;ODM;mBCa;SDI;+BCM;ODG;GRW;EUE;GVU;EWE;GX0B;EYE;GZI;EaE;GbK;CDE"}},"type":"js/module"}]}