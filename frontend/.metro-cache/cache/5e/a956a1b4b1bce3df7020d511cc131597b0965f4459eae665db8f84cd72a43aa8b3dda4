{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"]}},{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":291},"end":{"line":6,"column":36,"index":327}}],"key":"I5Lt2ouU6D9a2C2V4SJv4GWe8Fg=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"]}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":375},"end":{"line":8,"column":33,"index":408}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":409},"end":{"line":9,"column":39,"index":448}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"]}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":449},"end":{"line":10,"column":45,"index":494}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"]}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":495},"end":{"line":11,"column":55,"index":550}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n  var _hammerjs = _interopRequireDefault(require(_dependencyMap[2], \"@egjs/hammerjs\"));\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[3], \"react-native-web/dist/exports/findNodeHandle\"));\n  var _State = require(_dependencyMap[4], \"../State\");\n  var _constants = require(_dependencyMap[5], \"./constants\");\n  var NodeManager = _interopRequireWildcard(require(_dependencyMap[6], \"./NodeManager\"));\n  var _ghQueueMicrotask = require(_dependencyMap[7], \"../ghQueueMicrotask\");\n  const _excluded = [\"enabled\"];\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  /* eslint-disable eslint-comments/no-unlimited-disable */\n\n  /* eslint-disable */\n\n  // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n\n  let gestureInstances = 0;\n  class GestureHandler {\n    get id() {\n      return `${this.name}${this.gestureInstance}`;\n    } // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n    // here to use instanceof would cause import cycle\n\n    get isNative() {\n      return false;\n    }\n    get isDiscrete() {\n      return false;\n    }\n    get shouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    constructor() {\n      _defineProperty(this, \"handlerTag\", void 0);\n      _defineProperty(this, \"isGestureRunning\", false);\n      _defineProperty(this, \"view\", null);\n      _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n      _defineProperty(this, \"hasGestureFailed\", false);\n      _defineProperty(this, \"hammer\", null);\n      _defineProperty(this, \"initialRotation\", null);\n      _defineProperty(this, \"__initialX\", void 0);\n      _defineProperty(this, \"__initialY\", void 0);\n      _defineProperty(this, \"config\", {});\n      _defineProperty(this, \"previousState\", _State.State.UNDETERMINED);\n      _defineProperty(this, \"pendingGestures\", {});\n      _defineProperty(this, \"oldState\", _State.State.UNDETERMINED);\n      _defineProperty(this, \"lastSentState\", null);\n      _defineProperty(this, \"gestureInstance\", void 0);\n      _defineProperty(this, \"_stillWaiting\", void 0);\n      _defineProperty(this, \"propsRef\", void 0);\n      _defineProperty(this, \"ref\", void 0);\n      _defineProperty(this, \"clearSelfAsPending\", () => {\n        if (Array.isArray(this.config.waitFor)) {\n          for (const gesture of this.config.waitFor) {\n            gesture.removePendingGesture(this.id);\n          }\n        }\n      });\n      _defineProperty(this, \"destroy\", () => {\n        this.clearSelfAsPending();\n        if (this.hammer) {\n          this.hammer.stop(false);\n          this.hammer.destroy();\n        }\n        this.hammer = null;\n      });\n      _defineProperty(this, \"isPointInView\", ({\n        x,\n        y\n      }) => {\n        // @ts-ignore FIXME(TS)\n        const rect = this.view.getBoundingClientRect();\n        const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n        return pointerInside;\n      });\n      _defineProperty(this, \"sendEvent\", nativeEvent => {\n        const {\n          onGestureHandlerEvent,\n          onGestureHandlerStateChange\n        } = this.propsRef.current;\n        const event = this.transformEventData(nativeEvent);\n        invokeNullableMethod(onGestureHandlerEvent, event);\n        if (this.lastSentState !== event.nativeEvent.state) {\n          this.lastSentState = event.nativeEvent.state;\n          invokeNullableMethod(onGestureHandlerStateChange, event);\n        }\n      });\n      _defineProperty(this, \"sync\", () => {\n        const gesture = this.hammer.get(this.name);\n        if (!gesture) return;\n        const enable = (recognizer, inputData) => {\n          if (!this.config.enabled) {\n            this.isGestureRunning = false;\n            this.hasGestureFailed = false;\n            return false;\n          } // Prevent events before the system is ready.\n\n          if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n            return this.shouldEnableGestureOnSetup;\n          }\n          if (this.hasGestureFailed) {\n            return false;\n          }\n          if (!this.isDiscrete) {\n            if (this.isGestureRunning) {\n              return true;\n            } // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n            // Only process if there are views to wait for.\n\n            this._stillWaiting = this._getPendingGestures(); // This gesture should continue waiting.\n\n            if (this._stillWaiting.length) {\n              // Check to see if one of the gestures you're waiting for has started.\n              // If it has then the gesture should fail.\n              for (const gesture of this._stillWaiting) {\n                // When the target gesture has started, this gesture must force fail.\n                if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                  this.hasGestureFailed = true;\n                  this.isGestureRunning = false;\n                  return false;\n                }\n              } // This gesture shouldn't start until the others have finished.\n\n              return false;\n            }\n          } // Use default behaviour\n\n          if (!this.hasCustomActivationCriteria) {\n            return true;\n          }\n          const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation; // @ts-ignore FIXME(TS)\n\n          const {\n            success,\n            failed\n          } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, Object.assign({}, inputData, {\n            deltaRotation\n          }));\n          if (failed) {\n            this.simulateCancelEvent(inputData);\n            this.hasGestureFailed = true;\n          }\n          return success;\n        };\n        const params = this.getHammerConfig(); // @ts-ignore FIXME(TS)\n\n        gesture.set(Object.assign({}, params, {\n          enable\n        }));\n      });\n      this.gestureInstance = gestureInstances++;\n      this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n      return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n    get NativeGestureClass() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n    updateGestureConfig(_ref) {\n      let {\n          enabled = true\n        } = _ref,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig(Object.assign({\n        enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n    getState(type) {\n      // @ts-ignore TODO(TS) check if this is needed\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event; // const direction = DirectionMap[ev.direction];\n\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      }); // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n\n      const state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: Object.assign({\n          numberOfPointers,\n          state,\n          pointerInside\n        }, this.transformNativeEvent(event), {\n          // onHandlerStateChange only\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          // send oldState only when the state was changed, or is different than ACTIVE\n          // GestureDetector relies on the presence of `oldState` to differentiate between\n          // update events and state change events\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n    transformNativeEvent(_event) {\n      return {};\n    }\n    cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n    notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    } // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n\n    onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n    cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(Object.assign({}, event, {\n        eventType: _hammerjs.default.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n    onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n    shouldUseTouchEvents(config) {\n      var _config$simultaneousH, _config$simultaneousH2;\n      return (_config$simultaneousH = (_config$simultaneousH2 = config.simultaneousHandlers) === null || _config$simultaneousH2 === void 0 ? void 0 : _config$simultaneousH2.some(handler => handler.isNative)) !== null && _config$simultaneousH !== void 0 ? _config$simultaneousH : false;\n    }\n    setView(ref, propsRef) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      } // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n\n      const SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = (0, _findNodeHandle.default)(ref); // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n      // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n      // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new _hammerjs.default.Manager(this.view, {\n        inputClass: _hammerjs.default.TouchInput\n      }) : new _hammerjs.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this; // @ts-ignore TODO(TS)\n\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n        this.onRawEvent(ev); // TODO: Bacon: Check against something other than null\n        // The isFirst value is not called when the first rotation is calculated.\n\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          // in favor of a willFail otherwise the last frame of the gesture will be captured.\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n    setupEvents() {\n      // TODO(TS) Hammer types aren't exactly that what we get in runtime\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n          this.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      // Reset the state for the next gesture\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        // Get the list of gestures that this gesture is still waiting for.\n        // Use `=== false` in case a ref that isn't a gesture handler is used.\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n      return [];\n    }\n    getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n    simulateCancelEvent(_inputData) {} // Validate the props\n\n    ensureConfig(config) {\n      const props = Object.assign({}, config); // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(({\n          handlerTag\n        }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(v => v);\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n            // if the undelying event API needs to be changed, we need to unmount and mount\n            // the hammer instance again.\n            this.destroy();\n            this.setView(this.ref, this.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(prop => {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props; // TODO(TS) how to convince TS that props are filled?\n    }\n  } // TODO(TS) investigate this method\n  // Used for sending data to a callback or AnimatedEvent\n\n  function invokeNullableMethod(method, event) {\n    if (method) {\n      if (typeof method === 'function') {\n        method(event);\n      } else {\n        // For use with reanimated's AnimatedEvent\n        if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n          const handler = method.__getHandler();\n          invokeNullableMethod(handler, event);\n        } else {\n          if ('__nodeConfig' in method) {\n            const {\n              argMapping\n            } = method.__nodeConfig;\n            if (Array.isArray(argMapping)) {\n              for (const [index, [key, value]] of argMapping.entries()) {\n                if (key in event.nativeEvent) {\n                  // @ts-ignore fix method type\n                  const nativeValue = event.nativeEvent[key];\n                  if (value && value.setValue) {\n                    // Reanimated API\n                    value.setValue(nativeValue);\n                  } else {\n                    // RN Animated API\n                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n  }\n  var _default = exports.default = GestureHandler;\n});","lineCount":491,"map":[[8,2,6,0],[8,6,6,0,"_hammerjs"],[8,15,6,0],[8,18,6,0,"_interopRequireDefault"],[8,40,6,0],[8,41,6,0,"require"],[8,48,6,0],[8,49,6,0,"_dependencyMap"],[8,63,6,0],[9,2,6,36],[9,6,6,36,"_findNodeHandle"],[9,21,6,36],[9,24,6,36,"_interopRequireDefault"],[9,46,6,36],[9,47,6,36,"require"],[9,54,6,36],[9,55,6,36,"_dependencyMap"],[9,69,6,36],[10,2,8,0],[10,6,8,0,"_State"],[10,12,8,0],[10,15,8,0,"require"],[10,22,8,0],[10,23,8,0,"_dependencyMap"],[10,37,8,0],[11,2,9,0],[11,6,9,0,"_constants"],[11,16,9,0],[11,19,9,0,"require"],[11,26,9,0],[11,27,9,0,"_dependencyMap"],[11,41,9,0],[12,2,10,0],[12,6,10,0,"NodeManager"],[12,17,10,0],[12,20,10,0,"_interopRequireWildcard"],[12,43,10,0],[12,44,10,0,"require"],[12,51,10,0],[12,52,10,0,"_dependencyMap"],[12,66,10,0],[13,2,11,0],[13,6,11,0,"_ghQueueMicrotask"],[13,23,11,0],[13,26,11,0,"require"],[13,33,11,0],[13,34,11,0,"_dependencyMap"],[13,48,11,0],[14,2,11,55],[14,8,11,55,"_excluded"],[14,17,11,55],[15,2,11,55],[15,11,11,55,"_interopRequireWildcard"],[15,35,11,55,"e"],[15,36,11,55],[15,38,11,55,"t"],[15,39,11,55],[15,68,11,55,"WeakMap"],[15,75,11,55],[15,81,11,55,"r"],[15,82,11,55],[15,89,11,55,"WeakMap"],[15,96,11,55],[15,100,11,55,"n"],[15,101,11,55],[15,108,11,55,"WeakMap"],[15,115,11,55],[15,127,11,55,"_interopRequireWildcard"],[15,150,11,55],[15,162,11,55,"_interopRequireWildcard"],[15,163,11,55,"e"],[15,164,11,55],[15,166,11,55,"t"],[15,167,11,55],[15,176,11,55,"t"],[15,177,11,55],[15,181,11,55,"e"],[15,182,11,55],[15,186,11,55,"e"],[15,187,11,55],[15,188,11,55,"__esModule"],[15,198,11,55],[15,207,11,55,"e"],[15,208,11,55],[15,214,11,55,"o"],[15,215,11,55],[15,217,11,55,"i"],[15,218,11,55],[15,220,11,55,"f"],[15,221,11,55],[15,226,11,55,"__proto__"],[15,235,11,55],[15,243,11,55,"default"],[15,250,11,55],[15,252,11,55,"e"],[15,253,11,55],[15,270,11,55,"e"],[15,271,11,55],[15,294,11,55,"e"],[15,295,11,55],[15,320,11,55,"e"],[15,321,11,55],[15,330,11,55,"f"],[15,331,11,55],[15,337,11,55,"o"],[15,338,11,55],[15,341,11,55,"t"],[15,342,11,55],[15,345,11,55,"n"],[15,346,11,55],[15,349,11,55,"r"],[15,350,11,55],[15,358,11,55,"o"],[15,359,11,55],[15,360,11,55,"has"],[15,363,11,55],[15,364,11,55,"e"],[15,365,11,55],[15,375,11,55,"o"],[15,376,11,55],[15,377,11,55,"get"],[15,380,11,55],[15,381,11,55,"e"],[15,382,11,55],[15,385,11,55,"o"],[15,386,11,55],[15,387,11,55,"set"],[15,390,11,55],[15,391,11,55,"e"],[15,392,11,55],[15,394,11,55,"f"],[15,395,11,55],[15,411,11,55,"t"],[15,412,11,55],[15,416,11,55,"e"],[15,417,11,55],[15,433,11,55,"t"],[15,434,11,55],[15,441,11,55,"hasOwnProperty"],[15,455,11,55],[15,456,11,55,"call"],[15,460,11,55],[15,461,11,55,"e"],[15,462,11,55],[15,464,11,55,"t"],[15,465,11,55],[15,472,11,55,"i"],[15,473,11,55],[15,477,11,55,"o"],[15,478,11,55],[15,481,11,55,"Object"],[15,487,11,55],[15,488,11,55,"defineProperty"],[15,502,11,55],[15,507,11,55,"Object"],[15,513,11,55],[15,514,11,55,"getOwnPropertyDescriptor"],[15,538,11,55],[15,539,11,55,"e"],[15,540,11,55],[15,542,11,55,"t"],[15,543,11,55],[15,550,11,55,"i"],[15,551,11,55],[15,552,11,55,"get"],[15,555,11,55],[15,559,11,55,"i"],[15,560,11,55],[15,561,11,55,"set"],[15,564,11,55],[15,568,11,55,"o"],[15,569,11,55],[15,570,11,55,"f"],[15,571,11,55],[15,573,11,55,"t"],[15,574,11,55],[15,576,11,55,"i"],[15,577,11,55],[15,581,11,55,"f"],[15,582,11,55],[15,583,11,55,"t"],[15,584,11,55],[15,588,11,55,"e"],[15,589,11,55],[15,590,11,55,"t"],[15,591,11,55],[15,602,11,55,"f"],[15,603,11,55],[15,608,11,55,"e"],[15,609,11,55],[15,611,11,55,"t"],[15,612,11,55],[16,2,1,0],[16,11,1,9,"_defineProperty"],[16,26,1,24,"_defineProperty"],[16,27,1,25,"obj"],[16,30,1,28],[16,32,1,30,"key"],[16,35,1,33],[16,37,1,35,"value"],[16,42,1,40],[16,44,1,42],[17,4,1,44],[17,8,1,48,"key"],[17,11,1,51],[17,15,1,55,"obj"],[17,18,1,58],[17,20,1,60],[18,6,1,62,"Object"],[18,12,1,68],[18,13,1,69,"defineProperty"],[18,27,1,83],[18,28,1,84,"obj"],[18,31,1,87],[18,33,1,89,"key"],[18,36,1,92],[18,38,1,94],[19,8,1,96,"value"],[19,13,1,101],[19,15,1,103,"value"],[19,20,1,108],[20,8,1,110,"enumerable"],[20,18,1,120],[20,20,1,122],[20,24,1,126],[21,8,1,128,"configurable"],[21,20,1,140],[21,22,1,142],[21,26,1,146],[22,8,1,148,"writable"],[22,16,1,156],[22,18,1,158],[23,6,1,163],[23,7,1,164],[23,8,1,165],[24,4,1,167],[24,5,1,168],[24,11,1,174],[25,6,1,176,"obj"],[25,9,1,179],[25,10,1,180,"key"],[25,13,1,183],[25,14,1,184],[25,17,1,187,"value"],[25,22,1,192],[26,4,1,194],[27,4,1,196],[27,11,1,203,"obj"],[27,14,1,206],[28,2,1,208],[30,2,3,0],[32,2,5,0],[34,2,11,56],[36,2,13,0],[36,6,13,4,"gestureInstances"],[36,22,13,20],[36,25,13,23],[36,26,13,24],[37,2,15,0],[37,8,15,6,"GestureHandler"],[37,22,15,20],[37,23,15,21],[38,4,16,2],[38,8,16,6,"id"],[38,10,16,8,"id"],[38,11,16,8],[38,13,16,11],[39,6,17,4],[39,13,17,11],[39,16,17,14],[39,20,17,18],[39,21,17,19,"name"],[39,25,17,23],[39,28,17,26],[39,32,17,30],[39,33,17,31,"gestureInstance"],[39,48,17,46],[39,50,17,48],[40,4,18,2],[40,5,18,3],[40,6,18,4],[41,4,19,2],[43,4,22,2],[43,8,22,6,"isNative"],[43,16,22,14,"isNative"],[43,17,22,14],[43,19,22,17],[44,6,23,4],[44,13,23,11],[44,18,23,16],[45,4,24,2],[46,4,26,2],[46,8,26,6,"isDiscrete"],[46,18,26,16,"isDiscrete"],[46,19,26,16],[46,21,26,19],[47,6,27,4],[47,13,27,11],[47,18,27,16],[48,4,28,2],[49,4,30,2],[49,8,30,6,"shouldEnableGestureOnSetup"],[49,34,30,32,"shouldEnableGestureOnSetup"],[49,35,30,32],[49,37,30,35],[50,6,31,4],[50,12,31,10],[50,16,31,14,"Error"],[50,21,31,19],[50,22,31,20],[50,79,31,77],[50,80,31,78],[51,4,32,2],[52,4,34,2,"constructor"],[52,15,34,13,"constructor"],[52,16,34,13],[52,18,34,16],[53,6,35,4,"_defineProperty"],[53,21,35,19],[53,22,35,20],[53,26,35,24],[53,28,35,26],[53,40,35,38],[53,42,35,40],[53,47,35,45],[53,48,35,46],[53,49,35,47],[54,6,37,4,"_defineProperty"],[54,21,37,19],[54,22,37,20],[54,26,37,24],[54,28,37,26],[54,46,37,44],[54,48,37,46],[54,53,37,51],[54,54,37,52],[55,6,39,4,"_defineProperty"],[55,21,39,19],[55,22,39,20],[55,26,39,24],[55,28,39,26],[55,34,39,32],[55,36,39,34],[55,40,39,38],[55,41,39,39],[56,6,41,4,"_defineProperty"],[56,21,41,19],[56,22,41,20],[56,26,41,24],[56,28,41,26],[56,57,41,55],[56,59,41,57],[56,64,41,62],[56,65,41,63],[56,66,41,64],[57,6,43,4,"_defineProperty"],[57,21,43,19],[57,22,43,20],[57,26,43,24],[57,28,43,26],[57,46,43,44],[57,48,43,46],[57,53,43,51],[57,54,43,52],[58,6,45,4,"_defineProperty"],[58,21,45,19],[58,22,45,20],[58,26,45,24],[58,28,45,26],[58,36,45,34],[58,38,45,36],[58,42,45,40],[58,43,45,41],[59,6,47,4,"_defineProperty"],[59,21,47,19],[59,22,47,20],[59,26,47,24],[59,28,47,26],[59,45,47,43],[59,47,47,45],[59,51,47,49],[59,52,47,50],[60,6,49,4,"_defineProperty"],[60,21,49,19],[60,22,49,20],[60,26,49,24],[60,28,49,26],[60,40,49,38],[60,42,49,40],[60,47,49,45],[60,48,49,46],[60,49,49,47],[61,6,51,4,"_defineProperty"],[61,21,51,19],[61,22,51,20],[61,26,51,24],[61,28,51,26],[61,40,51,38],[61,42,51,40],[61,47,51,45],[61,48,51,46],[61,49,51,47],[62,6,53,4,"_defineProperty"],[62,21,53,19],[62,22,53,20],[62,26,53,24],[62,28,53,26],[62,36,53,34],[62,38,53,36],[62,39,53,37],[62,40,53,38],[62,41,53,39],[63,6,55,4,"_defineProperty"],[63,21,55,19],[63,22,55,20],[63,26,55,24],[63,28,55,26],[63,43,55,41],[63,45,55,43,"State"],[63,57,55,48],[63,58,55,49,"UNDETERMINED"],[63,70,55,61],[63,71,55,62],[64,6,57,4,"_defineProperty"],[64,21,57,19],[64,22,57,20],[64,26,57,24],[64,28,57,26],[64,45,57,43],[64,47,57,45],[64,48,57,46],[64,49,57,47],[64,50,57,48],[65,6,59,4,"_defineProperty"],[65,21,59,19],[65,22,59,20],[65,26,59,24],[65,28,59,26],[65,38,59,36],[65,40,59,38,"State"],[65,52,59,43],[65,53,59,44,"UNDETERMINED"],[65,65,59,56],[65,66,59,57],[66,6,61,4,"_defineProperty"],[66,21,61,19],[66,22,61,20],[66,26,61,24],[66,28,61,26],[66,43,61,41],[66,45,61,43],[66,49,61,47],[66,50,61,48],[67,6,63,4,"_defineProperty"],[67,21,63,19],[67,22,63,20],[67,26,63,24],[67,28,63,26],[67,45,63,43],[67,47,63,45],[67,52,63,50],[67,53,63,51],[67,54,63,52],[68,6,65,4,"_defineProperty"],[68,21,65,19],[68,22,65,20],[68,26,65,24],[68,28,65,26],[68,43,65,41],[68,45,65,43],[68,50,65,48],[68,51,65,49],[68,52,65,50],[69,6,67,4,"_defineProperty"],[69,21,67,19],[69,22,67,20],[69,26,67,24],[69,28,67,26],[69,38,67,36],[69,40,67,38],[69,45,67,43],[69,46,67,44],[69,47,67,45],[70,6,69,4,"_defineProperty"],[70,21,69,19],[70,22,69,20],[70,26,69,24],[70,28,69,26],[70,33,69,31],[70,35,69,33],[70,40,69,38],[70,41,69,39],[70,42,69,40],[71,6,71,4,"_defineProperty"],[71,21,71,19],[71,22,71,20],[71,26,71,24],[71,28,71,26],[71,48,71,46],[71,50,71,48],[71,56,71,54],[72,8,72,6],[72,12,72,10,"Array"],[72,17,72,15],[72,18,72,16,"isArray"],[72,25,72,23],[72,26,72,24],[72,30,72,28],[72,31,72,29,"config"],[72,37,72,35],[72,38,72,36,"waitFor"],[72,45,72,43],[72,46,72,44],[72,48,72,46],[73,10,73,8],[73,15,73,13],[73,21,73,19,"gesture"],[73,28,73,26],[73,32,73,30],[73,36,73,34],[73,37,73,35,"config"],[73,43,73,41],[73,44,73,42,"waitFor"],[73,51,73,49],[73,53,73,51],[74,12,74,10,"gesture"],[74,19,74,17],[74,20,74,18,"removePendingGesture"],[74,40,74,38],[74,41,74,39],[74,45,74,43],[74,46,74,44,"id"],[74,48,74,46],[74,49,74,47],[75,10,75,8],[76,8,76,6],[77,6,77,4],[77,7,77,5],[77,8,77,6],[78,6,79,4,"_defineProperty"],[78,21,79,19],[78,22,79,20],[78,26,79,24],[78,28,79,26],[78,37,79,35],[78,39,79,37],[78,45,79,43],[79,8,80,6],[79,12,80,10],[79,13,80,11,"clearSelfAsPending"],[79,31,80,29],[79,32,80,30],[79,33,80,31],[80,8,82,6],[80,12,82,10],[80,16,82,14],[80,17,82,15,"hammer"],[80,23,82,21],[80,25,82,23],[81,10,83,8],[81,14,83,12],[81,15,83,13,"hammer"],[81,21,83,19],[81,22,83,20,"stop"],[81,26,83,24],[81,27,83,25],[81,32,83,30],[81,33,83,31],[82,10,84,8],[82,14,84,12],[82,15,84,13,"hammer"],[82,21,84,19],[82,22,84,20,"destroy"],[82,29,84,27],[82,30,84,28],[82,31,84,29],[83,8,85,6],[84,8,87,6],[84,12,87,10],[84,13,87,11,"hammer"],[84,19,87,17],[84,22,87,20],[84,26,87,24],[85,6,88,4],[85,7,88,5],[85,8,88,6],[86,6,90,4,"_defineProperty"],[86,21,90,19],[86,22,90,20],[86,26,90,24],[86,28,90,26],[86,43,90,41],[86,45,90,43],[86,46,90,44],[87,8,91,6,"x"],[87,9,91,7],[88,8,92,6,"y"],[89,6,93,4],[89,7,93,5],[89,12,93,10],[90,8,94,6],[91,8,95,6],[91,14,95,12,"rect"],[91,18,95,16],[91,21,95,19],[91,25,95,23],[91,26,95,24,"view"],[91,30,95,28],[91,31,95,29,"getBoundingClientRect"],[91,52,95,50],[91,53,95,51],[91,54,95,52],[92,8,96,6],[92,14,96,12,"pointerInside"],[92,27,96,25],[92,30,96,28,"x"],[92,31,96,29],[92,35,96,33,"rect"],[92,39,96,37],[92,40,96,38,"left"],[92,44,96,42],[92,48,96,46,"x"],[92,49,96,47],[92,53,96,51,"rect"],[92,57,96,55],[92,58,96,56,"right"],[92,63,96,61],[92,67,96,65,"y"],[92,68,96,66],[92,72,96,70,"rect"],[92,76,96,74],[92,77,96,75,"top"],[92,80,96,78],[92,84,96,82,"y"],[92,85,96,83],[92,89,96,87,"rect"],[92,93,96,91],[92,94,96,92,"bottom"],[92,100,96,98],[93,8,97,6],[93,15,97,13,"pointerInside"],[93,28,97,26],[94,6,98,4],[94,7,98,5],[94,8,98,6],[95,6,100,4,"_defineProperty"],[95,21,100,19],[95,22,100,20],[95,26,100,24],[95,28,100,26],[95,39,100,37],[95,41,100,39,"nativeEvent"],[95,52,100,50],[95,56,100,54],[96,8,101,6],[96,14,101,12],[97,10,102,8,"onGestureHandlerEvent"],[97,31,102,29],[98,10,103,8,"onGestureHandlerStateChange"],[99,8,104,6],[99,9,104,7],[99,12,104,10],[99,16,104,14],[99,17,104,15,"propsRef"],[99,25,104,23],[99,26,104,24,"current"],[99,33,104,31],[100,8,105,6],[100,14,105,12,"event"],[100,19,105,17],[100,22,105,20],[100,26,105,24],[100,27,105,25,"transformEventData"],[100,45,105,43],[100,46,105,44,"nativeEvent"],[100,57,105,55],[100,58,105,56],[101,8,106,6,"invokeNullableMethod"],[101,28,106,26],[101,29,106,27,"onGestureHandlerEvent"],[101,50,106,48],[101,52,106,50,"event"],[101,57,106,55],[101,58,106,56],[102,8,108,6],[102,12,108,10],[102,16,108,14],[102,17,108,15,"lastSentState"],[102,30,108,28],[102,35,108,33,"event"],[102,40,108,38],[102,41,108,39,"nativeEvent"],[102,52,108,50],[102,53,108,51,"state"],[102,58,108,56],[102,60,108,58],[103,10,109,8],[103,14,109,12],[103,15,109,13,"lastSentState"],[103,28,109,26],[103,31,109,29,"event"],[103,36,109,34],[103,37,109,35,"nativeEvent"],[103,48,109,46],[103,49,109,47,"state"],[103,54,109,52],[104,10,110,8,"invokeNullableMethod"],[104,30,110,28],[104,31,110,29,"onGestureHandlerStateChange"],[104,58,110,56],[104,60,110,58,"event"],[104,65,110,63],[104,66,110,64],[105,8,111,6],[106,6,112,4],[106,7,112,5],[106,8,112,6],[107,6,114,4,"_defineProperty"],[107,21,114,19],[107,22,114,20],[107,26,114,24],[107,28,114,26],[107,34,114,32],[107,36,114,34],[107,42,114,40],[108,8,115,6],[108,14,115,12,"gesture"],[108,21,115,19],[108,24,115,22],[108,28,115,26],[108,29,115,27,"hammer"],[108,35,115,33],[108,36,115,34,"get"],[108,39,115,37],[108,40,115,38],[108,44,115,42],[108,45,115,43,"name"],[108,49,115,47],[108,50,115,48],[109,8,116,6],[109,12,116,10],[109,13,116,11,"gesture"],[109,20,116,18],[109,22,116,20],[110,8,118,6],[110,14,118,12,"enable"],[110,20,118,18],[110,23,118,21,"enable"],[110,24,118,22,"recognizer"],[110,34,118,32],[110,36,118,34,"inputData"],[110,45,118,43],[110,50,118,48],[111,10,119,8],[111,14,119,12],[111,15,119,13],[111,19,119,17],[111,20,119,18,"config"],[111,26,119,24],[111,27,119,25,"enabled"],[111,34,119,32],[111,36,119,34],[112,12,120,10],[112,16,120,14],[112,17,120,15,"isGestureRunning"],[112,33,120,31],[112,36,120,34],[112,41,120,39],[113,12,121,10],[113,16,121,14],[113,17,121,15,"hasGestureFailed"],[113,33,121,31],[113,36,121,34],[113,41,121,39],[114,12,122,10],[114,19,122,17],[114,24,122,22],[115,10,123,8],[115,11,123,9],[115,12,123,10],[117,10,126,8],[117,14,126,12],[117,15,126,13,"inputData"],[117,24,126,22],[117,28,126,26],[117,29,126,27,"recognizer"],[117,39,126,37],[117,40,126,38,"options"],[117,47,126,45],[117,51,126,49],[117,58,126,56,"inputData"],[117,67,126,65],[117,68,126,66,"maxPointers"],[117,79,126,77],[117,84,126,82],[117,95,126,93],[117,97,126,95],[118,12,127,10],[118,19,127,17],[118,23,127,21],[118,24,127,22,"shouldEnableGestureOnSetup"],[118,50,127,48],[119,10,128,8],[120,10,130,8],[120,14,130,12],[120,18,130,16],[120,19,130,17,"hasGestureFailed"],[120,35,130,33],[120,37,130,35],[121,12,131,10],[121,19,131,17],[121,24,131,22],[122,10,132,8],[123,10,134,8],[123,14,134,12],[123,15,134,13],[123,19,134,17],[123,20,134,18,"isDiscrete"],[123,30,134,28],[123,32,134,30],[124,12,135,10],[124,16,135,14],[124,20,135,18],[124,21,135,19,"isGestureRunning"],[124,37,135,35],[124,39,135,37],[125,14,136,12],[125,21,136,19],[125,25,136,23],[126,12,137,10],[126,13,137,11],[126,14,137,12],[127,12,138,10],[129,12,141,10],[129,16,141,14],[129,17,141,15,"_stillWaiting"],[129,30,141,28],[129,33,141,31],[129,37,141,35],[129,38,141,36,"_getPendingGestures"],[129,57,141,55],[129,58,141,56],[129,59,141,57],[129,60,141,58],[129,61,141,59],[131,12,143,10],[131,16,143,14],[131,20,143,18],[131,21,143,19,"_stillWaiting"],[131,34,143,32],[131,35,143,33,"length"],[131,41,143,39],[131,43,143,41],[132,14,144,12],[133,14,145,12],[134,14,146,12],[134,19,146,17],[134,25,146,23,"gesture"],[134,32,146,30],[134,36,146,34],[134,40,146,38],[134,41,146,39,"_stillWaiting"],[134,54,146,52],[134,56,146,54],[135,16,147,14],[136,16,148,14],[136,20,148,18],[136,21,148,19,"gesture"],[136,28,148,26],[136,29,148,27,"isDiscrete"],[136,39,148,37],[136,43,148,41,"gesture"],[136,50,148,48],[136,51,148,49,"isGestureRunning"],[136,67,148,65],[136,69,148,67],[137,18,149,16],[137,22,149,20],[137,23,149,21,"hasGestureFailed"],[137,39,149,37],[137,42,149,40],[137,46,149,44],[138,18,150,16],[138,22,150,20],[138,23,150,21,"isGestureRunning"],[138,39,150,37],[138,42,150,40],[138,47,150,45],[139,18,151,16],[139,25,151,23],[139,30,151,28],[140,16,152,14],[141,14,153,12],[141,15,153,13],[141,16,153,14],[143,14,156,12],[143,21,156,19],[143,26,156,24],[144,12,157,10],[145,10,158,8],[145,11,158,9],[145,12,158,10],[147,10,161,8],[147,14,161,12],[147,15,161,13],[147,19,161,17],[147,20,161,18,"hasCustomActivationCriteria"],[147,47,161,45],[147,49,161,47],[148,12,162,10],[148,19,162,17],[148,23,162,21],[149,10,163,8],[150,10,165,8],[150,16,165,14,"deltaRotation"],[150,29,165,27],[150,32,165,30],[150,36,165,34],[150,37,165,35,"initialRotation"],[150,52,165,50],[150,56,165,54],[150,60,165,58],[150,63,165,61],[150,64,165,62],[150,67,165,65,"inputData"],[150,76,165,74],[150,77,165,75,"rotation"],[150,85,165,83],[150,88,165,86],[150,92,165,90],[150,93,165,91,"initialRotation"],[150,108,165,106],[150,109,165,107],[150,110,165,108],[152,10,167,8],[152,16,167,14],[153,12,168,10,"success"],[153,19,168,17],[154,12,169,10,"failed"],[155,10,170,8],[155,11,170,9],[155,14,170,12],[155,18,170,16],[155,19,170,17,"isGestureEnabledForEvent"],[155,43,170,41],[155,44,170,42],[155,48,170,46],[155,49,170,47,"getConfig"],[155,58,170,56],[155,59,170,57],[155,60,170,58],[155,62,170,60,"recognizer"],[155,72,170,70],[155,74,170,70,"Object"],[155,80,170,70],[155,81,170,70,"assign"],[155,87,170,70],[155,92,170,77,"inputData"],[155,101,170,86],[156,12,171,10,"deltaRotation"],[157,10,171,23],[157,12,172,9],[157,13,172,10],[158,10,174,8],[158,14,174,12,"failed"],[158,20,174,18],[158,22,174,20],[159,12,175,10],[159,16,175,14],[159,17,175,15,"simulateCancelEvent"],[159,36,175,34],[159,37,175,35,"inputData"],[159,46,175,44],[159,47,175,45],[160,12,176,10],[160,16,176,14],[160,17,176,15,"hasGestureFailed"],[160,33,176,31],[160,36,176,34],[160,40,176,38],[161,10,177,8],[162,10,179,8],[162,17,179,15,"success"],[162,24,179,22],[163,8,180,6],[163,9,180,7],[164,8,182,6],[164,14,182,12,"params"],[164,20,182,18],[164,23,182,21],[164,27,182,25],[164,28,182,26,"getHammerConfig"],[164,43,182,41],[164,44,182,42],[164,45,182,43],[164,46,182,44],[164,47,182,45],[166,8,184,6,"gesture"],[166,15,184,13],[166,16,184,14,"set"],[166,19,184,17],[166,20,184,17,"Object"],[166,26,184,17],[166,27,184,17,"assign"],[166,33,184,17],[166,38,184,23,"params"],[166,44,184,29],[167,10,185,8,"enable"],[168,8,185,14],[168,10,186,7],[168,11,186,8],[169,6,187,4],[169,7,187,5],[169,8,187,6],[170,6,189,4],[170,10,189,8],[170,11,189,9,"gestureInstance"],[170,26,189,24],[170,29,189,27,"gestureInstances"],[170,45,189,43],[170,47,189,45],[171,6,190,4],[171,10,190,8],[171,11,190,9,"hasCustomActivationCriteria"],[171,38,190,36],[171,41,190,39],[171,46,190,44],[172,4,191,2],[173,4,193,2,"getConfig"],[173,13,193,11,"getConfig"],[173,14,193,11],[173,16,193,14],[174,6,194,4],[174,13,194,11],[174,17,194,15],[174,18,194,16,"config"],[174,24,194,22],[175,4,195,2],[176,4,197,2,"onWaitingEnded"],[176,18,197,16,"onWaitingEnded"],[176,19,197,17,"_gesture"],[176,27,197,25],[176,29,197,27],[176,30,197,28],[177,4,199,2,"removePendingGesture"],[177,24,199,22,"removePendingGesture"],[177,25,199,23,"id"],[177,27,199,25],[177,29,199,27],[178,6,200,4],[178,13,200,11],[178,17,200,15],[178,18,200,16,"pendingGestures"],[178,33,200,31],[178,34,200,32,"id"],[178,36,200,34],[178,37,200,35],[179,4,201,2],[180,4,203,2,"addPendingGesture"],[180,21,203,19,"addPendingGesture"],[180,22,203,20,"gesture"],[180,29,203,27],[180,31,203,29],[181,6,204,4],[181,10,204,8],[181,11,204,9,"pendingGestures"],[181,26,204,24],[181,27,204,25,"gesture"],[181,34,204,32],[181,35,204,33,"id"],[181,37,204,35],[181,38,204,36],[181,41,204,39,"gesture"],[181,48,204,46],[182,4,205,2],[183,4,207,2,"isGestureEnabledForEvent"],[183,28,207,26,"isGestureEnabledForEvent"],[183,29,207,27,"_config"],[183,36,207,34],[183,38,207,36,"_recognizer"],[183,49,207,47],[183,51,207,49,"_event"],[183,57,207,55],[183,59,207,57],[184,6,208,4],[184,13,208,11],[185,8,209,6,"success"],[185,15,209,13],[185,17,209,15],[186,6,210,4],[186,7,210,5],[187,4,211,2],[188,4,213,2],[188,8,213,6,"NativeGestureClass"],[188,26,213,24,"NativeGestureClass"],[188,27,213,24],[188,29,213,27],[189,6,214,4],[189,12,214,10],[189,16,214,14,"Error"],[189,21,214,19],[189,22,214,20],[189,71,214,69],[189,72,214,70],[190,4,215,2],[191,4,217,2,"updateHasCustomActivationCriteria"],[191,37,217,35,"updateHasCustomActivationCriteria"],[191,38,217,36,"_config"],[191,45,217,43],[191,47,217,45],[192,6,218,4],[192,13,218,11],[192,17,218,15],[193,4,219,2],[194,4,221,2,"updateGestureConfig"],[194,23,221,21,"updateGestureConfig"],[194,24,221,21,"_ref"],[194,28,221,21],[194,30,224,5],[195,6,224,5],[195,10,221,22],[196,10,222,4,"enabled"],[196,17,222,11],[196,20,222,14],[197,8,224,2],[197,9,224,3],[197,12,224,3,"_ref"],[197,16,224,3],[198,8,223,7,"props"],[198,13,223,12],[198,20,223,12,"_objectWithoutPropertiesLoose2"],[198,50,223,12],[198,51,223,12,"default"],[198,58,223,12],[198,60,223,12,"_ref"],[198,64,223,12],[198,66,223,12,"_excluded"],[198,75,223,12],[199,6,225,4],[199,10,225,8],[199,11,225,9,"clearSelfAsPending"],[199,29,225,27],[199,30,225,28],[199,31,225,29],[200,6,226,4],[200,10,226,8],[200,11,226,9,"config"],[200,17,226,15],[200,20,226,18],[200,24,226,22],[200,25,226,23,"ensureConfig"],[200,37,226,35],[200,38,226,35,"Object"],[200,44,226,35],[200,45,226,35,"assign"],[200,51,226,35],[201,8,227,6,"enabled"],[202,6,227,13],[202,9,228,9,"props"],[202,14,228,14],[202,15,229,5],[202,16,229,6],[203,6,230,4],[203,10,230,8],[203,11,230,9,"hasCustomActivationCriteria"],[203,38,230,36],[203,41,230,39],[203,45,230,43],[203,46,230,44,"updateHasCustomActivationCriteria"],[203,79,230,77],[203,80,230,78],[203,84,230,82],[203,85,230,83,"config"],[203,91,230,89],[203,92,230,90],[204,6,232,4],[204,10,232,8,"Array"],[204,15,232,13],[204,16,232,14,"isArray"],[204,23,232,21],[204,24,232,22],[204,28,232,26],[204,29,232,27,"config"],[204,35,232,33],[204,36,232,34,"waitFor"],[204,43,232,41],[204,44,232,42],[204,46,232,44],[205,8,233,6],[205,13,233,11],[205,19,233,17,"gesture"],[205,26,233,24],[205,30,233,28],[205,34,233,32],[205,35,233,33,"config"],[205,41,233,39],[205,42,233,40,"waitFor"],[205,49,233,47],[205,51,233,49],[206,10,234,8,"gesture"],[206,17,234,15],[206,18,234,16,"addPendingGesture"],[206,35,234,33],[206,36,234,34],[206,40,234,38],[206,41,234,39],[207,8,235,6],[208,6,236,4],[209,6,238,4],[209,10,238,8],[209,14,238,12],[209,15,238,13,"hammer"],[209,21,238,19],[209,23,238,21],[210,8,239,6],[210,12,239,10],[210,13,239,11,"sync"],[210,17,239,15],[210,18,239,16],[210,19,239,17],[211,6,240,4],[212,6,242,4],[212,13,242,11],[212,17,242,15],[212,18,242,16,"config"],[212,24,242,22],[213,4,243,2],[214,4,245,2,"getState"],[214,12,245,10,"getState"],[214,13,245,11,"type"],[214,17,245,15],[214,19,245,17],[215,6,246,4],[216,6,247,4],[216,10,247,8,"type"],[216,14,247,12],[216,18,247,16],[216,19,247,17],[216,21,247,19],[217,8,248,6],[217,15,248,13],[217,16,248,14],[218,6,249,4],[219,6,251,4],[219,13,251,11,"EventMap"],[219,32,251,19],[219,33,251,20,"type"],[219,37,251,24],[219,38,251,25],[220,4,252,2],[221,4,254,2,"transformEventData"],[221,22,254,20,"transformEventData"],[221,23,254,21,"event"],[221,28,254,26],[221,30,254,28],[222,6,255,4],[222,12,255,10],[223,8,256,6,"eventType"],[223,17,256,15],[224,8,257,6,"maxPointers"],[224,19,257,17],[224,21,257,19,"numberOfPointers"],[225,6,258,4],[225,7,258,5],[225,10,258,8,"event"],[225,15,258,13],[225,16,258,14],[225,17,258,15],[227,6,260,4],[227,12,260,10,"changedTouch"],[227,24,260,22],[227,27,260,25,"event"],[227,32,260,30],[227,33,260,31,"changedPointers"],[227,48,260,46],[227,49,260,47],[227,50,260,48],[227,51,260,49],[228,6,261,4],[228,12,261,10,"pointerInside"],[228,25,261,23],[228,28,261,26],[228,32,261,30],[228,33,261,31,"isPointInView"],[228,46,261,44],[228,47,261,45],[229,8,262,6,"x"],[229,9,262,7],[229,11,262,9,"changedTouch"],[229,23,262,21],[229,24,262,22,"clientX"],[229,31,262,29],[230,8,263,6,"y"],[230,9,263,7],[230,11,263,9,"changedTouch"],[230,23,263,21],[230,24,263,22,"clientY"],[231,6,264,4],[231,7,264,5],[231,8,264,6],[231,9,264,7],[231,10,264,8],[233,6,266,4],[233,12,266,10,"state"],[233,17,266,15],[233,20,266,18],[233,24,266,22],[233,25,266,23,"getState"],[233,33,266,31],[233,34,266,32,"eventType"],[233,43,266,41],[233,44,266,42],[234,6,268,4],[234,10,268,8,"state"],[234,15,268,13],[234,20,268,18],[234,24,268,22],[234,25,268,23,"previousState"],[234,38,268,36],[234,40,268,38],[235,8,269,6],[235,12,269,10],[235,13,269,11,"oldState"],[235,21,269,19],[235,24,269,22],[235,28,269,26],[235,29,269,27,"previousState"],[235,42,269,40],[236,8,270,6],[236,12,270,10],[236,13,270,11,"previousState"],[236,26,270,24],[236,29,270,27,"state"],[236,34,270,32],[237,6,271,4],[238,6,273,4],[238,13,273,11],[239,8,274,6,"nativeEvent"],[239,19,274,17],[239,21,274,17,"Object"],[239,27,274,17],[239,28,274,17,"assign"],[239,34,274,17],[240,10,275,8,"numberOfPointers"],[240,26,275,24],[241,10,276,8,"state"],[241,15,276,13],[242,10,277,8,"pointerInside"],[243,8,277,21],[243,11,278,11],[243,15,278,15],[243,16,278,16,"transformNativeEvent"],[243,36,278,36],[243,37,278,37,"event"],[243,42,278,42],[243,43,278,43],[244,10,279,8],[245,10,280,8,"handlerTag"],[245,20,280,18],[245,22,280,20],[245,26,280,24],[245,27,280,25,"handlerTag"],[245,37,280,35],[246,10,281,8,"target"],[246,16,281,14],[246,18,281,16],[246,22,281,20],[246,23,281,21,"ref"],[246,26,281,24],[247,10,282,8],[248,10,283,8],[249,10,284,8],[250,10,285,8,"oldState"],[250,18,285,16],[250,20,285,18,"state"],[250,25,285,23],[250,30,285,28],[250,34,285,32],[250,35,285,33,"previousState"],[250,48,285,46],[250,52,285,50,"state"],[250,57,285,55],[250,61,285,59],[250,62,285,60],[250,65,285,63],[250,69,285,67],[250,70,285,68,"oldState"],[250,78,285,76],[250,81,285,79,"undefined"],[251,8,285,88],[251,10,286,7],[252,8,287,6,"timeStamp"],[252,17,287,15],[252,19,287,17,"Date"],[252,23,287,21],[252,24,287,22,"now"],[252,27,287,25],[252,28,287,26],[253,6,288,4],[253,7,288,5],[254,4,289,2],[255,4,291,2,"transformNativeEvent"],[255,24,291,22,"transformNativeEvent"],[255,25,291,23,"_event"],[255,31,291,29],[255,33,291,31],[256,6,292,4],[256,13,292,11],[256,14,292,12],[256,15,292,13],[257,4,293,2],[258,4,295,2,"cancelPendingGestures"],[258,25,295,23,"cancelPendingGestures"],[258,26,295,24,"event"],[258,31,295,29],[258,33,295,31],[259,6,296,4],[259,11,296,9],[259,17,296,15,"gesture"],[259,24,296,22],[259,28,296,26,"Object"],[259,34,296,32],[259,35,296,33,"values"],[259,41,296,39],[259,42,296,40],[259,46,296,44],[259,47,296,45,"pendingGestures"],[259,62,296,60],[259,63,296,61],[259,65,296,63],[260,8,297,6],[260,12,297,10,"gesture"],[260,19,297,17],[260,23,297,21,"gesture"],[260,30,297,28],[260,31,297,29,"isGestureRunning"],[260,47,297,45],[260,49,297,47],[261,10,298,8,"gesture"],[261,17,298,15],[261,18,298,16,"hasGestureFailed"],[261,34,298,32],[261,37,298,35],[261,41,298,39],[262,10,299,8,"gesture"],[262,17,299,15],[262,18,299,16,"cancelEvent"],[262,29,299,27],[262,30,299,28,"event"],[262,35,299,33],[262,36,299,34],[263,8,300,6],[264,6,301,4],[265,4,302,2],[266,4,304,2,"notifyPendingGestures"],[266,25,304,23,"notifyPendingGestures"],[266,26,304,23],[266,28,304,26],[267,6,305,4],[267,11,305,9],[267,17,305,15,"gesture"],[267,24,305,22],[267,28,305,26,"Object"],[267,34,305,32],[267,35,305,33,"values"],[267,41,305,39],[267,42,305,40],[267,46,305,44],[267,47,305,45,"pendingGestures"],[267,62,305,60],[267,63,305,61],[267,65,305,63],[268,8,306,6],[268,12,306,10,"gesture"],[268,19,306,17],[268,21,306,19],[269,10,307,8,"gesture"],[269,17,307,15],[269,18,307,16,"onWaitingEnded"],[269,32,307,30],[269,33,307,31],[269,37,307,35],[269,38,307,36],[270,8,308,6],[271,6,309,4],[272,4,310,2],[272,5,310,3],[272,6,310,4],[274,4,313,2,"onGestureEnded"],[274,18,313,16,"onGestureEnded"],[274,19,313,17,"event"],[274,24,313,22],[274,26,313,24],[275,6,314,4],[275,10,314,8],[275,11,314,9,"isGestureRunning"],[275,27,314,25],[275,30,314,28],[275,35,314,33],[276,6,315,4],[276,10,315,8],[276,11,315,9,"cancelPendingGestures"],[276,32,315,30],[276,33,315,31,"event"],[276,38,315,36],[276,39,315,37],[277,4,316,2],[278,4,318,2,"forceInvalidate"],[278,19,318,17,"forceInvalidate"],[278,20,318,18,"event"],[278,25,318,23],[278,27,318,25],[279,6,319,4],[279,10,319,8],[279,14,319,12],[279,15,319,13,"isGestureRunning"],[279,31,319,29],[279,33,319,31],[280,8,320,6],[280,12,320,10],[280,13,320,11,"hasGestureFailed"],[280,29,320,27],[280,32,320,30],[280,36,320,34],[281,8,321,6],[281,12,321,10],[281,13,321,11,"cancelEvent"],[281,24,321,22],[281,25,321,23,"event"],[281,30,321,28],[281,31,321,29],[282,6,322,4],[283,4,323,2],[284,4,325,2,"cancelEvent"],[284,15,325,13,"cancelEvent"],[284,16,325,14,"event"],[284,21,325,19],[284,23,325,21],[285,6,326,4],[285,10,326,8],[285,11,326,9,"notifyPendingGestures"],[285,32,326,30],[285,33,326,31],[285,34,326,32],[286,6,327,4],[286,10,327,8],[286,11,327,9,"sendEvent"],[286,20,327,18],[286,21,327,18,"Object"],[286,27,327,18],[286,28,327,18,"assign"],[286,34,327,18],[286,39,327,24,"event"],[286,44,327,29],[287,8,328,6,"eventType"],[287,17,328,15],[287,19,328,17,"Hammer"],[287,36,328,23],[287,37,328,24,"INPUT_CANCEL"],[287,49,328,36],[288,8,329,6,"isFinal"],[288,15,329,13],[288,17,329,15],[289,6,329,19],[289,8,330,5],[289,9,330,6],[290,6,331,4],[290,10,331,8],[290,11,331,9,"onGestureEnded"],[290,25,331,23],[290,26,331,24,"event"],[290,31,331,29],[290,32,331,30],[291,4,332,2],[292,4,334,2,"onRawEvent"],[292,14,334,12,"onRawEvent"],[292,15,334,13],[293,6,335,4,"isFirst"],[294,4,336,2],[294,5,336,3],[294,7,336,5],[295,6,337,4],[295,10,337,8,"isFirst"],[295,17,337,15],[295,19,337,17],[296,8,338,6],[296,12,338,10],[296,13,338,11,"hasGestureFailed"],[296,29,338,27],[296,32,338,30],[296,37,338,35],[297,6,339,4],[298,4,340,2],[299,4,342,2,"shouldUseTouchEvents"],[299,24,342,22,"shouldUseTouchEvents"],[299,25,342,23,"config"],[299,31,342,29],[299,33,342,31],[300,6,343,4],[300,10,343,8,"_config$simultaneousH"],[300,31,343,29],[300,33,343,31,"_config$simultaneousH2"],[300,55,343,53],[301,6,345,4],[301,13,345,11],[301,14,345,12,"_config$simultaneousH"],[301,35,345,33],[301,38,345,36],[301,39,345,37,"_config$simultaneousH2"],[301,61,345,59],[301,64,345,62,"config"],[301,70,345,68],[301,71,345,69,"simultaneousHandlers"],[301,91,345,89],[301,97,345,95],[301,101,345,99],[301,105,345,103,"_config$simultaneousH2"],[301,127,345,125],[301,132,345,130],[301,137,345,135],[301,138,345,136],[301,141,345,139],[301,146,345,144],[301,147,345,145],[301,150,345,148,"_config$simultaneousH2"],[301,172,345,170],[301,173,345,171,"some"],[301,177,345,175],[301,178,345,176,"handler"],[301,185,345,183],[301,189,345,187,"handler"],[301,196,345,194],[301,197,345,195,"isNative"],[301,205,345,203],[301,206,345,204],[301,212,345,210],[301,216,345,214],[301,220,345,218,"_config$simultaneousH"],[301,241,345,239],[301,246,345,244],[301,251,345,249],[301,252,345,250],[301,255,345,253,"_config$simultaneousH"],[301,276,345,274],[301,279,345,277],[301,284,345,282],[302,4,346,2],[303,4,348,2,"setView"],[303,11,348,9,"setView"],[303,12,348,10,"ref"],[303,15,348,13],[303,17,348,15,"propsRef"],[303,25,348,23],[303,27,348,25],[304,6,349,4],[304,10,349,8,"ref"],[304,13,349,11],[304,17,349,15],[304,21,349,19],[304,23,349,21],[305,8,350,6],[305,12,350,10],[305,13,350,11,"destroy"],[305,20,350,18],[305,21,350,19],[305,22,350,20],[306,8,351,6],[306,12,351,10],[306,13,351,11,"view"],[306,17,351,15],[306,20,351,18],[306,24,351,22],[307,8,352,6],[308,6,353,4],[308,7,353,5],[308,8,353,6],[310,6,356,4],[310,12,356,10,"SUPPORTS_TOUCH"],[310,26,356,24],[310,29,356,28],[310,43,356,42],[310,47,356,46,"window"],[310,53,356,53],[311,6,357,4],[311,10,357,8],[311,11,357,9,"propsRef"],[311,19,357,17],[311,22,357,20,"propsRef"],[311,30,357,28],[312,6,358,4],[312,10,358,8],[312,11,358,9,"ref"],[312,14,358,12],[312,17,358,15,"ref"],[312,20,358,18],[313,6,359,4],[313,10,359,8],[313,11,359,9,"view"],[313,15,359,13],[313,18,359,16],[313,22,359,16,"findNodeHandle"],[313,45,359,30],[313,47,359,31,"ref"],[313,50,359,34],[313,51,359,35],[313,52,359,36],[313,53,359,37],[314,6,360,4],[315,6,361,4],[317,6,363,4],[317,10,363,8],[317,11,363,9,"hammer"],[317,17,363,15],[317,20,363,18,"SUPPORTS_TOUCH"],[317,34,363,32],[317,38,363,36],[317,42,363,40],[317,43,363,41,"shouldUseTouchEvents"],[317,63,363,61],[317,64,363,62],[317,68,363,66],[317,69,363,67,"config"],[317,75,363,73],[317,76,363,74],[317,79,363,77],[317,83,363,81,"Hammer"],[317,100,363,87],[317,101,363,88,"Manager"],[317,108,363,95],[317,109,363,96],[317,113,363,100],[317,114,363,101,"view"],[317,118,363,105],[317,120,363,107],[318,8,364,6,"inputClass"],[318,18,364,16],[318,20,364,18,"Hammer"],[318,37,364,24],[318,38,364,25,"TouchInput"],[319,6,365,4],[319,7,365,5],[319,8,365,6],[319,11,365,9],[319,15,365,13,"Hammer"],[319,32,365,19],[319,33,365,20,"Manager"],[319,40,365,27],[319,41,365,28],[319,45,365,32],[319,46,365,33,"view"],[319,50,365,37],[319,51,365,38],[320,6,366,4],[320,10,366,8],[320,11,366,9,"oldState"],[320,19,366,17],[320,22,366,20,"State"],[320,34,366,25],[320,35,366,26,"UNDETERMINED"],[320,47,366,38],[321,6,367,4],[321,10,367,8],[321,11,367,9,"previousState"],[321,24,367,22],[321,27,367,25,"State"],[321,39,367,30],[321,40,367,31,"UNDETERMINED"],[321,52,367,43],[322,6,368,4],[322,10,368,8],[322,11,368,9,"lastSentState"],[322,24,368,22],[322,27,368,25],[322,31,368,29],[323,6,369,4],[323,12,369,10],[324,8,370,6,"NativeGestureClass"],[325,6,371,4],[325,7,371,5],[325,10,371,8],[325,14,371,12],[325,15,371,13],[325,16,371,14],[327,6,373,4],[327,12,373,10,"gesture"],[327,19,373,17],[327,22,373,20],[327,26,373,24,"NativeGestureClass"],[327,44,373,42],[327,45,373,43],[327,49,373,47],[327,50,373,48,"getHammerConfig"],[327,65,373,63],[327,66,373,64],[327,67,373,65],[327,68,373,66],[328,6,374,4],[328,10,374,8],[328,11,374,9,"hammer"],[328,17,374,15],[328,18,374,16,"add"],[328,21,374,19],[328,22,374,20,"gesture"],[328,29,374,27],[328,30,374,28],[329,6,375,4],[329,10,375,8],[329,11,375,9,"hammer"],[329,17,375,15],[329,18,375,16,"on"],[329,20,375,18],[329,21,375,19],[329,35,375,33],[329,37,375,35,"ev"],[329,39,375,37],[329,43,375,41],[330,8,376,6],[330,12,376,10],[330,13,376,11],[330,17,376,15],[330,18,376,16,"config"],[330,24,376,22],[330,25,376,23,"enabled"],[330,32,376,30],[330,34,376,32],[331,10,377,8],[331,14,377,12],[331,15,377,13,"hasGestureFailed"],[331,31,377,29],[331,34,377,32],[331,39,377,37],[332,10,378,8],[332,14,378,12],[332,15,378,13,"isGestureRunning"],[332,31,378,29],[332,34,378,32],[332,39,378,37],[333,10,379,8],[334,8,380,6],[335,8,382,6],[335,12,382,10],[335,13,382,11,"onRawEvent"],[335,23,382,21],[335,24,382,22,"ev"],[335,26,382,24],[335,27,382,25],[335,28,382,26],[335,29,382,27],[336,8,383,6],[338,8,385,6],[338,12,385,10],[338,16,385,14],[338,17,385,15,"initialRotation"],[338,32,385,30],[338,37,385,35],[338,41,385,39],[338,45,385,43,"ev"],[338,47,385,45],[338,48,385,46,"rotation"],[338,56,385,54],[338,61,385,59],[338,62,385,60],[338,64,385,62],[339,10,386,8],[339,14,386,12],[339,15,386,13,"initialRotation"],[339,30,386,28],[339,33,386,31,"ev"],[339,35,386,33],[339,36,386,34,"rotation"],[339,44,386,42],[340,8,387,6],[341,8,389,6],[341,12,389,10,"ev"],[341,14,389,12],[341,15,389,13,"isFinal"],[341,22,389,20],[341,24,389,22],[342,10,390,8],[343,10,391,8,"setTimeout"],[343,20,391,18],[343,21,391,19],[343,27,391,25],[344,12,392,10],[344,16,392,14],[344,17,392,15,"initialRotation"],[344,32,392,30],[344,35,392,33],[344,39,392,37],[345,12,393,10],[345,16,393,14],[345,17,393,15,"hasGestureFailed"],[345,33,393,31],[345,36,393,34],[345,41,393,39],[346,10,394,8],[346,11,394,9],[346,12,394,10],[347,8,395,6],[348,6,396,4],[348,7,396,5],[348,8,396,6],[349,6,397,4],[349,10,397,8],[349,11,397,9,"setupEvents"],[349,22,397,20],[349,23,397,21],[349,24,397,22],[350,6,398,4],[350,10,398,8],[350,11,398,9,"sync"],[350,15,398,13],[350,16,398,14],[350,17,398,15],[351,4,399,2],[352,4,401,2,"setupEvents"],[352,15,401,13,"setupEvents"],[352,16,401,13],[352,18,401,16],[353,6,402,4],[354,6,403,4],[354,10,403,8],[354,11,403,9],[354,15,403,13],[354,16,403,14,"isDiscrete"],[354,26,403,24],[354,28,403,26],[355,8,404,6],[355,12,404,10],[355,13,404,11,"hammer"],[355,19,404,17],[355,20,404,18,"on"],[355,22,404,20],[355,23,404,21],[355,26,404,24],[355,30,404,28],[355,31,404,29,"name"],[355,35,404,33],[355,42,404,40],[355,44,404,42,"event"],[355,49,404,47],[355,53,404,51],[355,57,404,55],[355,58,404,56,"onStart"],[355,65,404,63],[355,66,404,64,"event"],[355,71,404,69],[355,72,404,70],[355,73,404,71],[356,8,405,6],[356,12,405,10],[356,13,405,11,"hammer"],[356,19,405,17],[356,20,405,18,"on"],[356,22,405,20],[356,23,405,21],[356,26,405,24],[356,30,405,28],[356,31,405,29,"name"],[356,35,405,33],[356,42,405,40],[356,46,405,44],[356,47,405,45,"name"],[356,51,405,49],[356,59,405,57],[356,61,405,59,"event"],[356,66,405,64],[356,70,405,68],[357,10,406,8],[357,14,406,12],[357,15,406,13,"onGestureEnded"],[357,29,406,27],[357,30,406,28,"event"],[357,35,406,33],[357,36,406,34],[358,8,407,6],[358,9,407,7],[358,10,407,8],[359,6,408,4],[360,6,410,4],[360,10,410,8],[360,11,410,9,"hammer"],[360,17,410,15],[360,18,410,16,"on"],[360,20,410,18],[360,21,410,19],[360,25,410,23],[360,26,410,24,"name"],[360,30,410,28],[360,32,410,30,"ev"],[360,34,410,32],[360,38,410,36],[360,42,410,40],[360,43,410,41,"onGestureActivated"],[360,61,410,59],[360,62,410,60,"ev"],[360,64,410,62],[360,65,410,63],[360,66,410,64],[360,67,410,65],[360,68,410,66],[361,4,411,2],[362,4,413,2,"onStart"],[362,11,413,9,"onStart"],[362,12,413,10],[363,6,414,4,"deltaX"],[363,12,414,10],[364,6,415,4,"deltaY"],[364,12,415,10],[365,6,416,4,"rotation"],[366,4,417,2],[366,5,417,3],[366,7,417,5],[367,6,418,4],[368,6,419,4],[368,10,419,8],[368,11,419,9,"oldState"],[368,19,419,17],[368,22,419,20,"State"],[368,34,419,25],[368,35,419,26,"UNDETERMINED"],[368,47,419,38],[369,6,420,4],[369,10,420,8],[369,11,420,9,"previousState"],[369,24,420,22],[369,27,420,25,"State"],[369,39,420,30],[369,40,420,31,"UNDETERMINED"],[369,52,420,43],[370,6,421,4],[370,10,421,8],[370,11,421,9,"lastSentState"],[370,24,421,22],[370,27,421,25],[370,31,421,29],[371,6,422,4],[371,10,422,8],[371,11,422,9,"isGestureRunning"],[371,27,422,25],[371,30,422,28],[371,34,422,32],[372,6,423,4],[372,10,423,8],[372,11,423,9,"__initialX"],[372,21,423,19],[372,24,423,22,"deltaX"],[372,30,423,28],[373,6,424,4],[373,10,424,8],[373,11,424,9,"__initialY"],[373,21,424,19],[373,24,424,22,"deltaY"],[373,30,424,28],[374,6,425,4],[374,10,425,8],[374,11,425,9,"initialRotation"],[374,26,425,24],[374,29,425,27,"rotation"],[374,37,425,35],[375,4,426,2],[376,4,428,2,"onGestureActivated"],[376,22,428,20,"onGestureActivated"],[376,23,428,21,"ev"],[376,25,428,23],[376,27,428,25],[377,6,429,4],[377,10,429,8],[377,11,429,9,"sendEvent"],[377,20,429,18],[377,21,429,19,"ev"],[377,23,429,21],[377,24,429,22],[378,4,430,2],[379,4,432,2,"onSuccess"],[379,13,432,11,"onSuccess"],[379,14,432,11],[379,16,432,14],[379,17,432,15],[380,4,434,2,"_getPendingGestures"],[380,23,434,21,"_getPendingGestures"],[380,24,434,21],[380,26,434,24],[381,6,435,4],[381,10,435,8,"Array"],[381,15,435,13],[381,16,435,14,"isArray"],[381,23,435,21],[381,24,435,22],[381,28,435,26],[381,29,435,27,"config"],[381,35,435,33],[381,36,435,34,"waitFor"],[381,43,435,41],[381,44,435,42],[381,48,435,46],[381,52,435,50],[381,53,435,51,"config"],[381,59,435,57],[381,60,435,58,"waitFor"],[381,67,435,65],[381,68,435,66,"length"],[381,74,435,72],[381,76,435,74],[382,8,436,6],[383,8,437,6],[384,8,438,6],[384,14,438,12,"stillWaiting"],[384,26,438,24],[384,29,438,27],[384,33,438,31],[384,34,438,32,"config"],[384,40,438,38],[384,41,438,39,"waitFor"],[384,48,438,46],[384,49,438,47,"filter"],[384,55,438,53],[384,56,438,54],[384,57,438,55],[385,10,439,8,"hasGestureFailed"],[386,8,440,6],[386,9,440,7],[386,14,440,12,"hasGestureFailed"],[386,30,440,28],[386,35,440,33],[386,40,440,38],[386,41,440,39],[387,8,441,6],[387,15,441,13,"stillWaiting"],[387,27,441,25],[388,6,442,4],[389,6,444,4],[389,13,444,11],[389,15,444,13],[390,4,445,2],[391,4,447,2,"getHammerConfig"],[391,19,447,17,"getHammerConfig"],[391,20,447,17],[391,22,447,20],[392,6,448,4],[392,12,448,10,"pointers"],[392,20,448,18],[392,23,448,21],[392,27,448,25],[392,28,448,26,"config"],[392,34,448,32],[392,35,448,33,"minPointers"],[392,46,448,44],[392,51,448,49],[392,55,448,53],[392,56,448,54,"config"],[392,62,448,60],[392,63,448,61,"maxPointers"],[392,74,448,72],[392,77,448,75],[392,81,448,79],[392,82,448,80,"config"],[392,88,448,86],[392,89,448,87,"minPointers"],[392,100,448,98],[392,103,448,101],[392,104,448,102],[393,6,449,4],[393,13,449,11],[394,8,450,6,"pointers"],[395,6,451,4],[395,7,451,5],[396,4,452,2],[397,4,454,2,"simulateCancelEvent"],[397,23,454,21,"simulateCancelEvent"],[397,24,454,22,"_inputData"],[397,34,454,32],[397,36,454,34],[397,37,454,35],[397,38,454,36],[397,39,454,37],[399,4,457,2,"ensureConfig"],[399,16,457,14,"ensureConfig"],[399,17,457,15,"config"],[399,23,457,21],[399,25,457,23],[400,6,458,4],[400,12,458,10,"props"],[400,17,458,15],[400,20,458,15,"Object"],[400,26,458,15],[400,27,458,15,"assign"],[400,33,458,15],[400,38,458,23,"config"],[400,44,458,29],[400,45,459,5],[400,46,459,6],[400,47,459,7],[402,6,461,4],[402,10,461,8],[402,19,461,17],[402,23,461,21,"config"],[402,29,461,27],[402,31,461,29],[403,8,462,6,"props"],[403,13,462,11],[403,14,462,12,"minDist"],[403,21,462,19],[403,24,462,22,"config"],[403,30,462,28],[403,31,462,29,"minDist"],[403,38,462,36],[404,8,463,6,"props"],[404,13,463,11],[404,14,463,12,"minDistSq"],[404,23,463,21],[404,26,463,24,"props"],[404,31,463,29],[404,32,463,30,"minDist"],[404,39,463,37],[404,42,463,40,"props"],[404,47,463,45],[404,48,463,46,"minDist"],[404,55,463,53],[405,6,464,4],[406,6,466,4],[406,10,466,8],[406,23,466,21],[406,27,466,25,"config"],[406,33,466,31],[406,35,466,33],[407,8,467,6,"props"],[407,13,467,11],[407,14,467,12,"minVelocity"],[407,25,467,23],[407,28,467,26,"config"],[407,34,467,32],[407,35,467,33,"minVelocity"],[407,46,467,44],[408,8,468,6,"props"],[408,13,468,11],[408,14,468,12,"minVelocitySq"],[408,27,468,25],[408,30,468,28,"props"],[408,35,468,33],[408,36,468,34,"minVelocity"],[408,47,468,45],[408,50,468,48,"props"],[408,55,468,53],[408,56,468,54,"minVelocity"],[408,67,468,65],[409,6,469,4],[410,6,471,4],[410,10,471,8],[410,19,471,17],[410,23,471,21,"config"],[410,29,471,27],[410,31,471,29],[411,8,472,6,"props"],[411,13,472,11],[411,14,472,12,"maxDist"],[411,21,472,19],[411,24,472,22,"config"],[411,30,472,28],[411,31,472,29,"maxDist"],[411,38,472,36],[412,8,473,6,"props"],[412,13,473,11],[412,14,473,12,"maxDistSq"],[412,23,473,21],[412,26,473,24,"config"],[412,32,473,30],[412,33,473,31,"maxDist"],[412,40,473,38],[412,43,473,41,"config"],[412,49,473,47],[412,50,473,48,"maxDist"],[412,57,473,55],[413,6,474,4],[414,6,476,4],[414,10,476,8],[414,19,476,17],[414,23,476,21,"config"],[414,29,476,27],[414,31,476,29],[415,8,477,6,"props"],[415,13,477,11],[415,14,477,12,"waitFor"],[415,21,477,19],[415,24,477,22,"asArray"],[415,31,477,29],[415,32,477,30,"config"],[415,38,477,36],[415,39,477,37,"waitFor"],[415,46,477,44],[415,47,477,45],[415,48,477,46,"map"],[415,51,477,49],[415,52,477,50],[415,53,477,51],[416,10,478,8,"handlerTag"],[417,8,479,6],[417,9,479,7],[417,14,479,12,"NodeManager"],[417,25,479,23],[417,26,479,24,"getHandler"],[417,36,479,34],[417,37,479,35,"handlerTag"],[417,47,479,45],[417,48,479,46],[417,49,479,47],[417,50,479,48,"filter"],[417,56,479,54],[417,57,479,55,"v"],[417,58,479,56],[417,62,479,60,"v"],[417,63,479,61],[417,64,479,62],[418,6,480,4],[418,7,480,5],[418,13,480,11],[419,8,481,6,"props"],[419,13,481,11],[419,14,481,12,"waitFor"],[419,21,481,19],[419,24,481,22],[419,28,481,26],[420,6,482,4],[421,6,484,4],[421,10,484,8],[421,32,484,30],[421,36,484,34,"config"],[421,42,484,40],[421,44,484,42],[422,8,485,6],[422,14,485,12,"shouldUseTouchEvents"],[422,34,485,32],[422,37,485,35],[422,41,485,39],[422,42,485,40,"shouldUseTouchEvents"],[422,62,485,60],[422,63,485,61],[422,67,485,65],[422,68,485,66,"config"],[422,74,485,72],[422,75,485,73],[423,8,486,6,"props"],[423,13,486,11],[423,14,486,12,"simultaneousHandlers"],[423,34,486,32],[423,37,486,35,"asArray"],[423,44,486,42],[423,45,486,43,"config"],[423,51,486,49],[423,52,486,50,"simultaneousHandlers"],[423,72,486,70],[423,73,486,71],[423,74,486,72,"map"],[423,77,486,75],[423,78,486,76,"handler"],[423,85,486,83],[423,89,486,87],[424,10,487,8],[424,14,487,12],[424,21,487,19,"handler"],[424,28,487,26],[424,33,487,31],[424,41,487,39],[424,43,487,41],[425,12,488,10],[425,19,488,17,"NodeManager"],[425,30,488,28],[425,31,488,29,"getHandler"],[425,41,488,39],[425,42,488,40,"handler"],[425,49,488,47],[425,50,488,48],[426,10,489,8],[426,11,489,9],[426,17,489,15],[427,12,490,10],[427,19,490,17,"NodeManager"],[427,30,490,28],[427,31,490,29,"getHandler"],[427,41,490,39],[427,42,490,40,"handler"],[427,49,490,47],[427,50,490,48,"handlerTag"],[427,60,490,58],[427,61,490,59],[428,10,491,8],[429,8,492,6],[429,9,492,7],[429,10,492,8],[429,11,492,9,"filter"],[429,17,492,15],[429,18,492,16,"v"],[429,19,492,17],[429,23,492,21,"v"],[429,24,492,22],[429,25,492,23],[430,8,494,6],[430,12,494,10,"shouldUseTouchEvents"],[430,32,494,30],[430,37,494,35],[430,41,494,39],[430,42,494,40,"shouldUseTouchEvents"],[430,62,494,60],[430,63,494,61,"props"],[430,68,494,66],[430,69,494,67],[430,71,494,69],[431,10,495,8],[431,14,495,8,"ghQueueMicrotask"],[431,48,495,24],[431,50,495,25],[431,56,495,31],[432,12,496,10],[433,12,497,10],[434,12,498,10],[434,16,498,14],[434,17,498,15,"destroy"],[434,24,498,22],[434,25,498,23],[434,26,498,24],[435,12,499,10],[435,16,499,14],[435,17,499,15,"setView"],[435,24,499,22],[435,25,499,23],[435,29,499,27],[435,30,499,28,"ref"],[435,33,499,31],[435,35,499,33],[435,39,499,37],[435,40,499,38,"propsRef"],[435,48,499,46],[435,49,499,47],[436,10,500,8],[436,11,500,9],[436,12,500,10],[437,8,501,6],[438,6,502,4],[438,7,502,5],[438,13,502,11],[439,8,503,6,"props"],[439,13,503,11],[439,14,503,12,"simultaneousHandlers"],[439,34,503,32],[439,37,503,35],[439,41,503,39],[440,6,504,4],[441,6,506,4],[441,12,506,10,"configProps"],[441,23,506,21],[441,26,506,24],[441,27,506,25],[441,40,506,38],[441,42,506,40],[441,55,506,53],[441,57,506,55],[441,66,506,64],[441,68,506,66],[441,77,506,75],[441,79,506,77],[441,90,506,88],[441,92,506,90],[441,107,506,105],[441,109,506,107],[441,120,506,118],[441,122,506,120],[441,135,506,133],[441,137,506,135],[441,155,506,153],[441,157,506,155],[441,175,506,173],[441,177,506,175],[441,193,506,191],[441,195,506,193],[441,211,506,209],[441,213,506,211],[441,233,506,231],[441,235,506,233],[441,253,506,251],[441,255,506,253],[441,275,506,273],[441,277,506,275],[441,295,506,293],[441,296,506,294],[442,6,507,4,"configProps"],[442,17,507,15],[442,18,507,16,"forEach"],[442,25,507,23],[442,26,507,24,"prop"],[442,30,507,28],[442,34,507,32],[443,8,508,6],[443,12,508,10],[443,19,508,17,"props"],[443,24,508,22],[443,25,508,23,"prop"],[443,29,508,27],[443,30,508,28],[443,35,508,33],[443,46,508,44],[443,48,508,46],[444,10,509,8,"props"],[444,15,509,13],[444,16,509,14,"prop"],[444,20,509,18],[444,21,509,19],[444,24,509,22,"Number"],[444,30,509,28],[444,31,509,29,"NaN"],[444,34,509,32],[445,8,510,6],[446,6,511,4],[446,7,511,5],[446,8,511,6],[447,6,512,4],[447,13,512,11,"props"],[447,18,512,16],[447,19,512,17],[447,20,512,18],[448,4,513,2],[449,2,515,0],[449,3,515,1],[449,4,515,2],[450,2,516,0],[452,2,519,0],[452,11,519,9,"invokeNullableMethod"],[452,31,519,29,"invokeNullableMethod"],[452,32,519,30,"method"],[452,38,519,36],[452,40,519,38,"event"],[452,45,519,43],[452,47,519,45],[453,4,520,2],[453,8,520,6,"method"],[453,14,520,12],[453,16,520,14],[454,6,521,4],[454,10,521,8],[454,17,521,15,"method"],[454,23,521,21],[454,28,521,26],[454,38,521,36],[454,40,521,38],[455,8,522,6,"method"],[455,14,522,12],[455,15,522,13,"event"],[455,20,522,18],[455,21,522,19],[456,6,523,4],[456,7,523,5],[456,13,523,11],[457,8,524,6],[458,8,525,6],[458,12,525,10],[458,26,525,24],[458,30,525,28,"method"],[458,36,525,34],[458,40,525,38],[458,47,525,45,"method"],[458,53,525,51],[458,54,525,52,"__getHandler"],[458,66,525,64],[458,71,525,69],[458,81,525,79],[458,83,525,81],[459,10,526,8],[459,16,526,14,"handler"],[459,23,526,21],[459,26,526,24,"method"],[459,32,526,30],[459,33,526,31,"__getHandler"],[459,45,526,43],[459,46,526,44],[459,47,526,45],[460,10,528,8,"invokeNullableMethod"],[460,30,528,28],[460,31,528,29,"handler"],[460,38,528,36],[460,40,528,38,"event"],[460,45,528,43],[460,46,528,44],[461,8,529,6],[461,9,529,7],[461,15,529,13],[462,10,530,8],[462,14,530,12],[462,28,530,26],[462,32,530,30,"method"],[462,38,530,36],[462,40,530,38],[463,12,531,10],[463,18,531,16],[464,14,532,12,"argMapping"],[465,12,533,10],[465,13,533,11],[465,16,533,14,"method"],[465,22,533,20],[465,23,533,21,"__nodeConfig"],[465,35,533,33],[466,12,535,10],[466,16,535,14,"Array"],[466,21,535,19],[466,22,535,20,"isArray"],[466,29,535,27],[466,30,535,28,"argMapping"],[466,40,535,38],[466,41,535,39],[466,43,535,41],[467,14,536,12],[467,19,536,17],[467,25,536,23],[467,26,536,24,"index"],[467,31,536,29],[467,33,536,31],[467,34,536,32,"key"],[467,37,536,35],[467,39,536,37,"value"],[467,44,536,42],[467,45,536,43],[467,46,536,44],[467,50,536,48,"argMapping"],[467,60,536,58],[467,61,536,59,"entries"],[467,68,536,66],[467,69,536,67],[467,70,536,68],[467,72,536,70],[468,16,537,14],[468,20,537,18,"key"],[468,23,537,21],[468,27,537,25,"event"],[468,32,537,30],[468,33,537,31,"nativeEvent"],[468,44,537,42],[468,46,537,44],[469,18,538,16],[470,18,539,16],[470,24,539,22,"nativeValue"],[470,35,539,33],[470,38,539,36,"event"],[470,43,539,41],[470,44,539,42,"nativeEvent"],[470,55,539,53],[470,56,539,54,"key"],[470,59,539,57],[470,60,539,58],[471,18,541,16],[471,22,541,20,"value"],[471,27,541,25],[471,31,541,29,"value"],[471,36,541,34],[471,37,541,35,"setValue"],[471,45,541,43],[471,47,541,45],[472,20,542,18],[473,20,543,18,"value"],[473,25,543,23],[473,26,543,24,"setValue"],[473,34,543,32],[473,35,543,33,"nativeValue"],[473,46,543,44],[473,47,543,45],[474,18,544,16],[474,19,544,17],[474,25,544,23],[475,20,545,18],[476,20,546,18,"method"],[476,26,546,24],[476,27,546,25,"__nodeConfig"],[476,39,546,37],[476,40,546,38,"argMapping"],[476,50,546,48],[476,51,546,49,"index"],[476,56,546,54],[476,57,546,55],[476,60,546,58],[476,61,546,59,"key"],[476,64,546,62],[476,66,546,64,"nativeValue"],[476,77,546,75],[476,78,546,76],[477,18,547,16],[478,16,548,14],[479,14,549,12],[480,12,550,10],[481,10,551,8],[482,8,552,6],[483,6,553,4],[484,4,554,2],[485,2,555,0],[486,2,557,0],[486,11,557,9,"asArray"],[486,18,557,16,"asArray"],[486,19,557,17,"value"],[486,24,557,22],[486,26,557,24],[487,4,558,2],[488,4,559,2],[488,11,559,9,"value"],[488,16,559,14],[488,20,559,18],[488,24,559,22],[488,27,559,25],[488,29,559,27],[488,32,559,30,"Array"],[488,37,559,35],[488,38,559,36,"isArray"],[488,45,559,43],[488,46,559,44,"value"],[488,51,559,49],[488,52,559,50],[488,55,559,53,"value"],[488,60,559,58],[488,63,559,61],[488,64,559,62,"value"],[488,69,559,67],[488,70,559,68],[489,2,560,0],[490,2,560,1],[490,6,560,1,"_default"],[490,14,560,1],[490,17,560,1,"exports"],[490,24,560,1],[490,25,560,1,"default"],[490,32,560,1],[490,35,562,15,"GestureHandler"],[490,49,562,29],[491,0,562,29],[491,3]],"functionMap":{"names":["_defineProperty","<global>","GestureHandler","get__id","get__isNative","get__isDiscrete","get__shouldEnableGestureOnSetup","constructor","_defineProperty$argument_2","enable","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","isGestureEnabledForEvent","get__NativeGestureClass","updateHasCustomActivationCriteria","updateGestureConfig","getState","transformEventData","transformNativeEvent","cancelPendingGestures","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","onRawEvent","shouldUseTouchEvents","_config$simultaneousH2.some$argument_0","setView","hammer.on$argument_1","setTimeout$argument_0","setupEvents","onStart","onGestureActivated","onSuccess","_getPendingGestures","config.waitFor.filter$argument_0","getHammerConfig","simulateCancelEvent","ensureConfig","asArray.map$argument_0","asArray.map.filter$argument_0","ghQueueMicrotask$argument_0","configProps.forEach$argument_0","invokeNullableMethod","asArray"],"mappings":"AAA,iNC;ACc;ECC;GDE;EEI;GFE;EGE;GHE;EIE;GJE;EKE;gDCqC;KDM;qCCE;KDS;2CCE;KDQ;uCCE;KDY;kCCE;qBCI;OD8D;KDO;GLI;EQE;GRE;ESE,2BT;EUE;GVE;EWE;GXE;EYE;GZI;EaE;GbE;EcE;GdE;EeE;GfsB;EgBE;GhBO;EiBE;GjBmC;EkBE;GlBE;EmBE;GnBO;EoBE;GpBM;EqBG;GrBG;EsBE;GtBK;EuBE;GvBO;EwBE;GxBM;EyBE;gLCG,2BD;GzBC;E2BE;mCC2B;mBCgB;SDG;KDE;G3BG;E8BE;0CFG,4BE;2DFC;OEE;8BFG,iCE;G9BC;E+BE;G/Ba;EgCE;GhCE;EiCE,cjC;EkCE;sDCI;sCDE;GlCK;EoCE;GpCK;EqCE,kCrC;EsCG;kDCoB;8CDE,SE,MF;4ECO;ODM,SE,MF;yBGG;SHK;wBIO;KJI;GtCE;CDE;A4CI;C5CoC;A6CE;C7CG"}},"type":"js/module"}]}